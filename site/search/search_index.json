{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Psych-DS Psych-DS is a community data standard, providing a systematic way of formatting and documenting scientific datasets. It is heavily inspired by the Brain Image Data Structure (BIDS) standard for fMRI data. Motivation Studies in the social and behavioral sciences result in datasets that can be arranged in many different ways and in many different file formats. So far, there is no consensus about how to organize and share data obtained in these projects. Even two researchers working in the same lab can opt to arrange their data in a different way. Lack of consensus (or a standard) leads to misunderstandings and time wasted on rearranging data or rewriting scripts expecting certain structure, and hampers creation of software tools for discovering or searching among existing datasets. Psych-DS provides a simple and easy-to-adopt way of organizing psychological and behavioral data, which aims to satisfy FAIR principles for data sharing. Critically, there are two goals for this standard: (1) we wish to promote the adoption of good practices in the management of scientific data by individual working scientists and (2) we wish to create a machine-readable format for these datasets that can support tools for analysis, discovery, and preparation of datasets in psychology. Structure The full set of rules and specifications that comprise Psych-DS, referred to as the Psych-DS \"schema\", can be found in Psych-DS Rules and Conventions , and guidance on creating your own Psych-DS dataset can be found in Getting Started with Psych-DS . For a more structured, technical reference, you can check out the official schema model , which makes use of the linkML data modeling language . This is the resource that our validator apps reference when determining if a dataset is compliant with our standard. A corresponding Markdown representation of the schema can be found within within the Schema Reference section of the docs (see navigation bar above). For the most part, the Psych-DS schema is concerned with (1) metadata practices and (2) folder/file conventions. The following information delves into these concepts in the abstract; more detailed technical information can be found in the resources listed above. Metadata The purpose of metadata is to provide rich contextual information about the provenance and contents of a digital artifact. Without good metadata practices, context might be provided on an ad-hoc basis. For instance, a researcher may share a compressed folder full of CSV files to another researcher and say \"here are the results of XYZ experiment. Each file contains the responses from a given participant, and unique participant id's are reflected in the file names.\" This certainly provides some of the necessary context, but now that context lives in the body of an email, and if the researcher who received it wants to share it elsewhere, they'll have to restate the context or forward the email wholesale. Alternatively, if the researcher were to include a metadata file in the folder, they could use it to enumerate the relevant context in a way that remains permanently attached to the data it describes. The metadata file could provide information about the researchers who conducted the study, the site where data was collected, the publication that resulted from it, etc. With good metadata, the dataset becomes a self-describing object , and now the reseacher could simply share the compressed folder and to their colleague and say \"hey, check this out\", and all the necessary context would be contained within the folder. In its most richly informative form (and this is what Psych-DS facilitates), metadata not only provides human-readable context, but context that is structured in such a way that it can be accessed and interpreted by machines, including search engines, digital agents, and cataloguing systems. If the researcher observes standardized conventions regarding the name, location, and structure of metadata files, then machines can locate information about the dataset without any human intervention. Additionally, By using standardized \"semantic vocabularies\" such as Schema.org (which provide unambiguous, conventional defitions of useful concepts such as \"Dataset\" , \"name\" , \"author\" , \"variableMeasured\" , etc.) researchers can provide information about their dataset that machines can not only locate and access, but interpret . To facilitate these ideal metadata practices, Psych-DS requires researchers to include a global metadata file named \"dataset_description.json\", using JSON-LD formatting , a common standard for linked data . The schema specifies a number of required/recommended fields to include in this file, all of which are derived, as mentioned, from the Schema.org ontology. This gives researchers the freedom to include metadata files ranging from minimal and satisfactory to richly informative and structured . 2. Folder/File Conventions In addition to providing context for a dataset in the form of rich, conventionally structured metadata, we also want to ensure that the actual contents of our dataset (the data files) are able to be located/identified without any human guidance. Without the help of clear folder/file conventions, researchers structure their datasets in an idiosyncratic, ad-hoc manner. One researcher may store all of their data files in one big pile under the root directory. Others may have the common sense to separate their data files and supplementary materials into separate subdirectories, but may name their subdirectory for data files on a whim, choosing something like \"data/\", \"study_data/\", \"data_dir/\", etc. Additionally, the contents of these data directories may contain a mixture of files in various formats, states of pre-/post-processing, etc., making it unclear which files are meant to be the \"canonical\" contents of the dataset. For a human, it's easy to navigate and interpret these idiosyncratic structures to locate the files with which they're concerned, but strong conventions for structuring subdirectories and naming files provide crucial benefits for both humans and machines. Many researchers are familiar with the frustrations involved in running statistical analyses spanning datasets from disparate experiments, labs, or universities. Many precious hours have been wasted either repackaging datasets into a uniform structure or writing bespoke R scripts to manage all the various folder/file conventions. By adopting the Psych-DS schema, individual researchers, labs, and even (ideally) entire research communities can ensure that all of their data is structured in the same way. Doing so minimizes confusion and facilitates the creation of robust, reuseable pipelines for data processing/analysis. In certain fields, such as neuroscience, the data derived from experiments take the form of complex, idiosyncratically structured physiological measurements often involving highly specified file formats. In such contexts, strong data conventions are much more of a necessity than a convenience, and as such, standards such as BIDS have been widely adopted. In the behavioral sciences, response data is often structurally simpler but more widely varied, and tabular file formats like CSV and TSV are often sufficient for representating data. In such a context, strong data conventions have taken longer to gain traction, since researchers often see it as easier to compile and re-format datasets ad-hoc than to enforce and adopt community standards. By providing a set of minimal, easily adoptable structural standards, Psych-DS provides benefits that far outweigh their cost in terms of adoption. In short, we expect datasets to contain a subdirectory called \"data/\", which can contain any number of subdirectories within it. \"Canonical\" data files for the dataset are all found under this directory, easily identifiable by their use of the CSV file format, the \"_data\" suffix at the end of the filename, and the use of \"keyword\" formatting to identify relevant properties of each file. An example of a \"canonical\" data file might be \"data/primary_data/study-1a_participant-145_data.csv\". Validation The Psych-DS team is developing a suite of applications across multiple frameworks (browser-based, node.js, Python, R) that researchers can use to quickly confirm that their datasets are compliant with our data standard. These validators function as the \"ground truth\" for Psych-DS compliance, such that any dataset which the validator approves is considered \"valid\" for all intents and purposes. These validator tools all make use of the official schema model to derive the set of rules/checks that are applied during validation, which means that any updates made to the schema model are immediately reflected across all frameworks. For most researchers, the easiest tool to make use of is the browser-based validator , whose usage is self-explanatory, but further guidance can be found at Using the Psych-DS Validator , which also covers how to install the various non-browser implementations as well as how to integrate the tools programmatically into existing pipelines. The primary function of the validator is to provide an output of either VALID or INVALID , and any input deemed INVALID is accompanied by a full enumeration of the specific errors that were detected, including pointers to the files/fields that produced them. Additionally, if the \"showWarnings\" flag is selected prior to validation, the tool will provide helpful warnings about elements that are recommended rather than required, which can help researchers go beyond creating datasets that are merely satisfactory and toward the ideal of datasets that are maximally informative and comprehensive. DISCLAIMER: the Psych-DS team takes the anonymity and proprietary nature of certain datasets as a primary concern, and as such, all validator tools were designed so that no dataset is ever uploaded or stored in any way during validation. For instance, when using the browser-based tool, datasets that are input for validation are inspected and checked using client-side javascript. No data is ever sent to a web server, and there is no database attached to the application.","title":"Home"},{"location":"#psych-ds","text":"Psych-DS is a community data standard, providing a systematic way of formatting and documenting scientific datasets. It is heavily inspired by the Brain Image Data Structure (BIDS) standard for fMRI data.","title":"Psych-DS"},{"location":"#motivation","text":"Studies in the social and behavioral sciences result in datasets that can be arranged in many different ways and in many different file formats. So far, there is no consensus about how to organize and share data obtained in these projects. Even two researchers working in the same lab can opt to arrange their data in a different way. Lack of consensus (or a standard) leads to misunderstandings and time wasted on rearranging data or rewriting scripts expecting certain structure, and hampers creation of software tools for discovering or searching among existing datasets. Psych-DS provides a simple and easy-to-adopt way of organizing psychological and behavioral data, which aims to satisfy FAIR principles for data sharing. Critically, there are two goals for this standard: (1) we wish to promote the adoption of good practices in the management of scientific data by individual working scientists and (2) we wish to create a machine-readable format for these datasets that can support tools for analysis, discovery, and preparation of datasets in psychology.","title":"Motivation"},{"location":"#structure","text":"The full set of rules and specifications that comprise Psych-DS, referred to as the Psych-DS \"schema\", can be found in Psych-DS Rules and Conventions , and guidance on creating your own Psych-DS dataset can be found in Getting Started with Psych-DS . For a more structured, technical reference, you can check out the official schema model , which makes use of the linkML data modeling language . This is the resource that our validator apps reference when determining if a dataset is compliant with our standard. A corresponding Markdown representation of the schema can be found within within the Schema Reference section of the docs (see navigation bar above). For the most part, the Psych-DS schema is concerned with (1) metadata practices and (2) folder/file conventions. The following information delves into these concepts in the abstract; more detailed technical information can be found in the resources listed above.","title":"Structure"},{"location":"#metadata","text":"The purpose of metadata is to provide rich contextual information about the provenance and contents of a digital artifact. Without good metadata practices, context might be provided on an ad-hoc basis. For instance, a researcher may share a compressed folder full of CSV files to another researcher and say \"here are the results of XYZ experiment. Each file contains the responses from a given participant, and unique participant id's are reflected in the file names.\" This certainly provides some of the necessary context, but now that context lives in the body of an email, and if the researcher who received it wants to share it elsewhere, they'll have to restate the context or forward the email wholesale. Alternatively, if the researcher were to include a metadata file in the folder, they could use it to enumerate the relevant context in a way that remains permanently attached to the data it describes. The metadata file could provide information about the researchers who conducted the study, the site where data was collected, the publication that resulted from it, etc. With good metadata, the dataset becomes a self-describing object , and now the reseacher could simply share the compressed folder and to their colleague and say \"hey, check this out\", and all the necessary context would be contained within the folder. In its most richly informative form (and this is what Psych-DS facilitates), metadata not only provides human-readable context, but context that is structured in such a way that it can be accessed and interpreted by machines, including search engines, digital agents, and cataloguing systems. If the researcher observes standardized conventions regarding the name, location, and structure of metadata files, then machines can locate information about the dataset without any human intervention. Additionally, By using standardized \"semantic vocabularies\" such as Schema.org (which provide unambiguous, conventional defitions of useful concepts such as \"Dataset\" , \"name\" , \"author\" , \"variableMeasured\" , etc.) researchers can provide information about their dataset that machines can not only locate and access, but interpret . To facilitate these ideal metadata practices, Psych-DS requires researchers to include a global metadata file named \"dataset_description.json\", using JSON-LD formatting , a common standard for linked data . The schema specifies a number of required/recommended fields to include in this file, all of which are derived, as mentioned, from the Schema.org ontology. This gives researchers the freedom to include metadata files ranging from minimal and satisfactory to richly informative and structured .","title":"Metadata"},{"location":"#2-folderfile-conventions","text":"In addition to providing context for a dataset in the form of rich, conventionally structured metadata, we also want to ensure that the actual contents of our dataset (the data files) are able to be located/identified without any human guidance. Without the help of clear folder/file conventions, researchers structure their datasets in an idiosyncratic, ad-hoc manner. One researcher may store all of their data files in one big pile under the root directory. Others may have the common sense to separate their data files and supplementary materials into separate subdirectories, but may name their subdirectory for data files on a whim, choosing something like \"data/\", \"study_data/\", \"data_dir/\", etc. Additionally, the contents of these data directories may contain a mixture of files in various formats, states of pre-/post-processing, etc., making it unclear which files are meant to be the \"canonical\" contents of the dataset. For a human, it's easy to navigate and interpret these idiosyncratic structures to locate the files with which they're concerned, but strong conventions for structuring subdirectories and naming files provide crucial benefits for both humans and machines. Many researchers are familiar with the frustrations involved in running statistical analyses spanning datasets from disparate experiments, labs, or universities. Many precious hours have been wasted either repackaging datasets into a uniform structure or writing bespoke R scripts to manage all the various folder/file conventions. By adopting the Psych-DS schema, individual researchers, labs, and even (ideally) entire research communities can ensure that all of their data is structured in the same way. Doing so minimizes confusion and facilitates the creation of robust, reuseable pipelines for data processing/analysis. In certain fields, such as neuroscience, the data derived from experiments take the form of complex, idiosyncratically structured physiological measurements often involving highly specified file formats. In such contexts, strong data conventions are much more of a necessity than a convenience, and as such, standards such as BIDS have been widely adopted. In the behavioral sciences, response data is often structurally simpler but more widely varied, and tabular file formats like CSV and TSV are often sufficient for representating data. In such a context, strong data conventions have taken longer to gain traction, since researchers often see it as easier to compile and re-format datasets ad-hoc than to enforce and adopt community standards. By providing a set of minimal, easily adoptable structural standards, Psych-DS provides benefits that far outweigh their cost in terms of adoption. In short, we expect datasets to contain a subdirectory called \"data/\", which can contain any number of subdirectories within it. \"Canonical\" data files for the dataset are all found under this directory, easily identifiable by their use of the CSV file format, the \"_data\" suffix at the end of the filename, and the use of \"keyword\" formatting to identify relevant properties of each file. An example of a \"canonical\" data file might be \"data/primary_data/study-1a_participant-145_data.csv\".","title":"2. Folder/File Conventions"},{"location":"#validation","text":"The Psych-DS team is developing a suite of applications across multiple frameworks (browser-based, node.js, Python, R) that researchers can use to quickly confirm that their datasets are compliant with our data standard. These validators function as the \"ground truth\" for Psych-DS compliance, such that any dataset which the validator approves is considered \"valid\" for all intents and purposes. These validator tools all make use of the official schema model to derive the set of rules/checks that are applied during validation, which means that any updates made to the schema model are immediately reflected across all frameworks. For most researchers, the easiest tool to make use of is the browser-based validator , whose usage is self-explanatory, but further guidance can be found at Using the Psych-DS Validator , which also covers how to install the various non-browser implementations as well as how to integrate the tools programmatically into existing pipelines. The primary function of the validator is to provide an output of either VALID or INVALID , and any input deemed INVALID is accompanied by a full enumeration of the specific errors that were detected, including pointers to the files/fields that produced them. Additionally, if the \"showWarnings\" flag is selected prior to validation, the tool will provide helpful warnings about elements that are recommended rather than required, which can help researchers go beyond creating datasets that are merely satisfactory and toward the ideal of datasets that are maximally informative and comprehensive. DISCLAIMER: the Psych-DS team takes the anonymity and proprietary nature of certain datasets as a primary concern, and as such, all validator tools were designed so that no dataset is ever uploaded or stored in any way during validation. For instance, when using the browser-based tool, datasets that are input for validation are inspected and checked using client-side javascript. No data is ever sent to a web server, and there is no database attached to the application.","title":"Validation"},{"location":"advanced_practices/","text":"Advanced Practices JSON-LD JSON-LD is a more flexible and complex data format than the minimal requirements of Psych-DS would suggest. As a default, our standard recommends setting one default namespace , \"https://schema.org\", and using it throughout. This makes sense, given that the main metadata object in a Psych-DS dataset is required to use the type \"https://schema.org/Dataset\", and the required/recommended fields for this object are Schema.org properties. Psych-DS, though, does not prohibit the usage of other namespaces, as some datasets and context may require more specified or fine-grained vocabularies than the Schema.org ontology can provide. The caveat here is that the Psych-DS validator is not capable of type-checking these external namespaces, or even confirming their validity as semantic vocabularies at all, whereas the validator does contain a full reference to the schema.org ontology and can confirm the validity of any usage. In the tutorials and examples provided elsewhere in the documentation, the Schema.org namespace is declared as a default by using the format \"@context\": \"https://schema.org/\" . The result of this usage is that all types and properties found within the metadata object are prepended with the Schema.org namespace and interpreted as Schema.org objects and properties. Alternatively, multiple namespaces can be declared within the \"@context\" property, and each of them is given a shorthand label, which must then be used for any type/property to which the namespace applies Here is a full example: { \"@context\":{ \"schema\":\"https://schema.org/\", \"foaf\":\"http://xmlns.com/foaf/0.1/\" }, \"@type\":\"schema:Dataset\", \"schema:name\": \"Test Dataset\", \"schema:description\": \"Test Description\", \"schema:variableMeasured\":[\"a\",\"b\",\"c\"], \"foaf:externalProperty\": \"Test Value\" } The above metadata object is just as valid as any other example, since declaring the Schema.org namespace under the shorthand \"schema\" and applying this to all relevant objects has the same effect as declaring Schema.org as the default namespace and having the namespace apply automatically. There are a number of other privileged JSON-LD vocabulary terms besides just \"@context\" and \"@type\", and though they go beyond the scope of this tutorial, they are free to be used however each researcher sees fit. The functions and constraints that define proper usage of these terms can be found in the JSON-LD grammar , and the Psych-DS validator will provide appropriate and descriptive errors whenever these terms are used in such a way that violates the JSON-LD grammar. Expanded vs Compact Form In most examples online, JSON-LD objects are presented in compact form , which means that a \"@context\" property is included which is expected to apply to all types and properties used within the object. On the technical side of things, when JSON-LD is actually being used by machines for linked data purposes, it will be represented in expanded form , which removes the \"@context\" property, applies the namespaces therein to all appropriate types/properties, and reformats all basic values such as strings and urls into untyped objects with either \"@value\" or \"@id\" properties. Here is an example of the JSON-LD object from the previous section in its expanded form: [ { \"@type\": [ \"https://schema.org/Dataset\" ], \"http://xmlns.com/foaf/0.1/externalProperty\": [ { \"@value\": \"Test Value\" } ], \"https://schema.org/description\": [ { \"@value\": \"Test Description\" } ], \"https://schema.org/name\": [ { \"@value\": \"Test Dataset\" } ], \"https://schema.org/variableMeasured\": [ { \"@value\": \"a\" }, { \"@value\": \"b\" }, { \"@value\": \"c\" } ] } ] As you can see, the \"@context\" property is no longer present, but the \"schema\" and \"foaf\" shorthands have been replaced by the full correspondent namespace wherever they were applied. Additionally, for example, instead of having an array of strings as its value, \"variableMeasured\" has an array of objects whose only property is \"@value\", whose value is the original string in question. In the process of validation, all metadata objects are transformed internally to the expanded form, so it is perfectly valid under Psych-DS to represent metadata in either compact or expanded form, as they are merely different representations of the same underlying object. Schema.org For most researcher's purposes, the vocabulary provided by Schema.org should be perfectly sufficient to create richly informative and structured metadata objects. As mentioned elsewhere in the documentation, most Schema.org properties can either take bare strings, URLs, or complex objects as their values. In an ideal metadata object, bare strings should be avoided whenever possible, as they represent the point at which metadata stops being useful for machine-readable purposes. For instance, let's take the \"author\" property of the \"Dataset\" type as an example. To satisfy Psych-DS's base requirements, having a string such as \"John Doe\" as the value of \"author\" is sufficient, but it has severe limitations when it comes to linked data practice. The most obvious reason is that very few names in the world are universally unique (especially ones like \"John Doe\"), so including just the name is not actually sufficient for either humans or machines when it comes to identifying the true author of the dataset. In a slightly improved scenario, one might include a link to an informative webpage about the author rather than a string. For instance, many researchers will have an institutional webpage such as \"university.edu/faculty/john-doe\". This works well for disambiguating the individual and providing context for humans, but since the personal page likely has an idiosyncratic structure with variable information, it is less useful for purposes of machine-readability. Third party identification services like ORCID ID are useful for guaranteeing unique, universal IDs for individuals (which take the form of web URLs, or URIs) that are widely adopted across research communities. This widespread adoption is a big plus when it comes to metadata, as the more researchers who use an ORCID ID to refer to a given researcher in their metadata, the more this individual's work can be consistently identified and compiled in the process of searching for data. In the ideal scenario, the value of \"author\" would be a typed JSON-LD object. In this way, not only can the the individual be uniquely identified with an \"@id\", but any additional properties/relations can be applied and associated with that individual. Below is an example: { ... \"author\":{ \"@type\": \"Person\", \"@id\":\"https://orcid.org/0022-0002-3833-3472\", \"name\":\"Test Person\", \"nationality\":\"USA\", \"gender\":\"male\", \"children\":[ { \"@type\":\"Person\", \"@id\":\"https://www.testpage.com/person\", \"name\":\"Child Test\" } ], \"jobTitle\":\"Post-doctoral Researcher\", \"affiliation\":\"https://www.mit.edu\" } }","title":"Advanced Practices"},{"location":"advanced_practices/#advanced-practices","text":"","title":"Advanced Practices"},{"location":"advanced_practices/#json-ld","text":"JSON-LD is a more flexible and complex data format than the minimal requirements of Psych-DS would suggest. As a default, our standard recommends setting one default namespace , \"https://schema.org\", and using it throughout. This makes sense, given that the main metadata object in a Psych-DS dataset is required to use the type \"https://schema.org/Dataset\", and the required/recommended fields for this object are Schema.org properties. Psych-DS, though, does not prohibit the usage of other namespaces, as some datasets and context may require more specified or fine-grained vocabularies than the Schema.org ontology can provide. The caveat here is that the Psych-DS validator is not capable of type-checking these external namespaces, or even confirming their validity as semantic vocabularies at all, whereas the validator does contain a full reference to the schema.org ontology and can confirm the validity of any usage. In the tutorials and examples provided elsewhere in the documentation, the Schema.org namespace is declared as a default by using the format \"@context\": \"https://schema.org/\" . The result of this usage is that all types and properties found within the metadata object are prepended with the Schema.org namespace and interpreted as Schema.org objects and properties. Alternatively, multiple namespaces can be declared within the \"@context\" property, and each of them is given a shorthand label, which must then be used for any type/property to which the namespace applies Here is a full example: { \"@context\":{ \"schema\":\"https://schema.org/\", \"foaf\":\"http://xmlns.com/foaf/0.1/\" }, \"@type\":\"schema:Dataset\", \"schema:name\": \"Test Dataset\", \"schema:description\": \"Test Description\", \"schema:variableMeasured\":[\"a\",\"b\",\"c\"], \"foaf:externalProperty\": \"Test Value\" } The above metadata object is just as valid as any other example, since declaring the Schema.org namespace under the shorthand \"schema\" and applying this to all relevant objects has the same effect as declaring Schema.org as the default namespace and having the namespace apply automatically. There are a number of other privileged JSON-LD vocabulary terms besides just \"@context\" and \"@type\", and though they go beyond the scope of this tutorial, they are free to be used however each researcher sees fit. The functions and constraints that define proper usage of these terms can be found in the JSON-LD grammar , and the Psych-DS validator will provide appropriate and descriptive errors whenever these terms are used in such a way that violates the JSON-LD grammar.","title":"JSON-LD"},{"location":"advanced_practices/#expanded-vs-compact-form","text":"In most examples online, JSON-LD objects are presented in compact form , which means that a \"@context\" property is included which is expected to apply to all types and properties used within the object. On the technical side of things, when JSON-LD is actually being used by machines for linked data purposes, it will be represented in expanded form , which removes the \"@context\" property, applies the namespaces therein to all appropriate types/properties, and reformats all basic values such as strings and urls into untyped objects with either \"@value\" or \"@id\" properties. Here is an example of the JSON-LD object from the previous section in its expanded form: [ { \"@type\": [ \"https://schema.org/Dataset\" ], \"http://xmlns.com/foaf/0.1/externalProperty\": [ { \"@value\": \"Test Value\" } ], \"https://schema.org/description\": [ { \"@value\": \"Test Description\" } ], \"https://schema.org/name\": [ { \"@value\": \"Test Dataset\" } ], \"https://schema.org/variableMeasured\": [ { \"@value\": \"a\" }, { \"@value\": \"b\" }, { \"@value\": \"c\" } ] } ] As you can see, the \"@context\" property is no longer present, but the \"schema\" and \"foaf\" shorthands have been replaced by the full correspondent namespace wherever they were applied. Additionally, for example, instead of having an array of strings as its value, \"variableMeasured\" has an array of objects whose only property is \"@value\", whose value is the original string in question. In the process of validation, all metadata objects are transformed internally to the expanded form, so it is perfectly valid under Psych-DS to represent metadata in either compact or expanded form, as they are merely different representations of the same underlying object.","title":"Expanded vs Compact Form"},{"location":"advanced_practices/#schemaorg","text":"For most researcher's purposes, the vocabulary provided by Schema.org should be perfectly sufficient to create richly informative and structured metadata objects. As mentioned elsewhere in the documentation, most Schema.org properties can either take bare strings, URLs, or complex objects as their values. In an ideal metadata object, bare strings should be avoided whenever possible, as they represent the point at which metadata stops being useful for machine-readable purposes. For instance, let's take the \"author\" property of the \"Dataset\" type as an example. To satisfy Psych-DS's base requirements, having a string such as \"John Doe\" as the value of \"author\" is sufficient, but it has severe limitations when it comes to linked data practice. The most obvious reason is that very few names in the world are universally unique (especially ones like \"John Doe\"), so including just the name is not actually sufficient for either humans or machines when it comes to identifying the true author of the dataset. In a slightly improved scenario, one might include a link to an informative webpage about the author rather than a string. For instance, many researchers will have an institutional webpage such as \"university.edu/faculty/john-doe\". This works well for disambiguating the individual and providing context for humans, but since the personal page likely has an idiosyncratic structure with variable information, it is less useful for purposes of machine-readability. Third party identification services like ORCID ID are useful for guaranteeing unique, universal IDs for individuals (which take the form of web URLs, or URIs) that are widely adopted across research communities. This widespread adoption is a big plus when it comes to metadata, as the more researchers who use an ORCID ID to refer to a given researcher in their metadata, the more this individual's work can be consistently identified and compiled in the process of searching for data. In the ideal scenario, the value of \"author\" would be a typed JSON-LD object. In this way, not only can the the individual be uniquely identified with an \"@id\", but any additional properties/relations can be applied and associated with that individual. Below is an example: { ... \"author\":{ \"@type\": \"Person\", \"@id\":\"https://orcid.org/0022-0002-3833-3472\", \"name\":\"Test Person\", \"nationality\":\"USA\", \"gender\":\"male\", \"children\":[ { \"@type\":\"Person\", \"@id\":\"https://www.testpage.com/person\", \"name\":\"Child Test\" } ], \"jobTitle\":\"Post-doctoral Researcher\", \"affiliation\":\"https://www.mit.edu\" } }","title":"Schema.org"},{"location":"getting_started/","text":"Getting Started with Psych-DS Congratulations on deciding to join the Psych-DS community! By adopting our data standard, not only do you benefit from having a consistent system for structuring and annotating your own scientific data, but you grow the Psych-DS ecosystem as well, increasing the interoperability and organization of behavioral datasets at large. This guide will restate some principles that can be found elsewhere in the Psych-DS Rules and Conventions and the Schema Reference (see navigation bar), but with more of an orientation towards setting up one's first Psych-DS compliant dataset. Formatting Data Files Before we begin, let's assume that you have one or more data files that comprise the results of one or more scientific experiments. The content of these files can vary greatly; they may be responses from a Qualtrics Survey, reaction times and responses from a self-paced reading study, answers to a pen-and-paper questionnaire, etc. The first order of business, which may already be taken care of, is to compile your results into any number of tabular CSV files. If you're unfamiliar, CSVs (comma-separated values) are one of several file formats for storing tabular data, i.e. spreadsheets. CSVs can be formatted manually or downloaded/exported from any spreadsheet software, such as Excel, Sheets, or Numbers. Once your data files are formatted as CSVs, you'll have to name them according to the Psych-DS rules. This means choosing a series of keyword pairs to identify each file. To do this, just think of what makes each file different from the others. For instance, if one file represents the results for a whole experiment, the keyword \"study-YourStudy\" may be sufficient. If each file corresponds to a different subject/participant, you might use keywords like \"study-YourStudy\" and \"subject-001\" . Once you've decided on these keyword identifiers, you can string them together using underscores (\"_\") and append the \"_data\" suffix to mark the file as one of your dataset's \"official\" data files. The result might look something like this: \"study-YourStudy_subject-001_data.csv\" . Formatting Folders To begin with, you'll need a folder to represent your dataset in general. Create an empty folder and name it something that identifies the overarching dataset, like \"MyTestExperiment\" . Within that folder, create another folder called \"data\" . This part is non-negotiable: all Psych-DS compliant datasets must have a \"data\" directory in which all of the official data files for the dataset are stored. We can think of our dataset's \"official\" data files as the ones that are fully cleaned and processed, those that we would input to R for statistical analysis or share publicly as the results of the experiment. Other files, like those in different stages of pre-processing or stored in formats other than CSVs, may also be stored in the data directory, but only those files that follow keyword formatting, use the \"_data\" suffix, and have \".csv\" as an extension will be considered \"official\" and be subject to Psych-DS validation. Within the data directory, you can create any folder structure that suits your needs. Perhaps you want to create a subfolder for each stage of a study, or a subfolder for each month during which sessions were conducted. Regardless of how many subfolders intervene between the data directory and a given data file, Psych-DS will still detect the file and subject it to validation. This principle, for our purposes, is called \"arbitrary nesting\" . Creating Metadata One of the central goals of Psych-DS is to foster good metadata practices. Metadata, to put it simply, is data about data. When we encounter a dataset, we don't just want to know what the results were, we want to know about their context. Who conducted the study, when was it conducted, what publications resulted from it, how should it be cited? Rich, informative metadata files can provide answers to all these questions and more in a standardized, machine readable format. Each Psych-DS dataset is required to include a global metadata file , called \"dataset_description.json\" , in the root folder. As the extension suggests, it must be formatted as a valid JSON file, and additionally, it must function as a valid JSON-LD file, which is a linked data format. If you find the concept of \"linked data\" intimidating, there's no need to worry. It's easy for anyone to create a valid metadata file by modifying one of our basic examples or by making use of user-friendly tools like the CEDAR Metadata Wizard . For purposes of clarity, let's try working from the following example: { \"@context\":\"https://schema.org/\", \"@type\":\"Dataset\", \"name\":\"MyTestExperiment\", \"description\":\"This is an experiment that I am using to try out Psych-DS!\", \"variableMeasured\":[\"variable1\",\"variable2\",\"variable3\"] } As we can see, a JSON file is enclosed in brackets and contains a series of \"key\":\"value\" pairings separated by commas. \"name\" , \"description\" , and \"variableMeasured\" are REQUIRED fields in Psych-DS, so they are included here. Other fields, such as \"author\" , \"citation\" , and \"funder\" are RECOMMENDED . The full list of metadata fields, along with their definitions, can be found under \"Schema_Reference/objects/metadata\" in the navigation bar. The purpose of the \"variableMeasured\" field is to enumerate the various column headers used across all of your data files. So, if your dataset has two data files, and in the first, the column headers are \"variable1\", \"variable2\", \"variable3\", and in the second, they are \"variable1\" and \"variable4\", then the value for your \"variableMeasured\" field should be [\"variable1\",\"variable2\",\"variable3\",\"variable4\"] . As a convenience feature, if you input a dataset with an empty \"variableMeasured\" field into the Psych-DS validator, it will output a suggested value for you based on the data files that it finds. Linking Metadata The \"@context\" and \"@type\" fields are part of what makes this file function as a \"JSON-LD\" linked data object. If you want, you can just include these exactly as they're shown in the above example and never think about them again. For a little more context, when building linked data objects, we want to use semantic vocabularies for our keys and some of our values. This makes the terms we use standardized, unambiguous, and interpretable by machines. So, when we list \"https://schema.org/\" under our \"@context\", we are establishing the Schema.org ontology as the default namespace for our metadata. The ontology, which is widely adopted across the web, is essentially a heirarchy of concepts. So, the most generic concept in the ontology is a \"Thing\" , whereas a more specific concept might be something like a \"Dataset\" . Each of these concepts has a definition as well as certain properties associated with it. When we put \"Dataset\" as the value for the \"@type\" property, we are saying that the entity our metadata describes is a Dataset corresponding to the Schema.org definition. As such, our Dataset object can take certain values, and this is where valid metadata fields like \"name\", \"description\", and \"variableMeasured\" are derived from. Linked data is a powerful tool, and there are other rules that govern how we can use it to create rich, informative metadata, but we'll leave thing here for now. For those interested in taking a deeper dive into this and other concepts, check out the Advanced Practices page. Adding Peripheral Materials In this guide, we've specifically intended to walk you through the base requirements for a Psych-DS compliant dataset, but that doesn't mean that you can't add additional materials related to your experiment(s). Psych-DS encourages the inclusion of such subdirectories within the root directory as materials (for any stimuli, images, videos, etc. used in the process of administering your experiment), documentation (for any documents used in the process, such as consent/debriefing forms), analysis (for any code or other tools used to analyze your data files), and products (for any publications, presentations or posters that resulted from your work). It is also recommended to include a README.md file for general information and a CHANGES.md file to log any changes or updates that you've made since first compiling the dataset. You may add any other arbitrary subdirectories according to your specific needs and preferences. This may result in a validator warning, indicating that you've included files that don't match the schema specifications, but you can suppress these by adding any directories/files that you like to the \".psychds-ignore\" file. Validating Dataset Now that you have all the necessary pieces in place, it's time to visit the Psych-DS Validator Tool and confirm that what you have is a Psych-DS compliant dataset! Once you have it open, simply click \"select dataset\" and indicate your MyTestExperiment folder. You'll receive your validation results, and if it says VALID , then you're good to go! If it says INVALID , then you'll have to look through the errors reported by the validator and make whatever small adjustments to your dataset are necessary. (Note: if you'd like to see warnings about best practices in addition to error outputs, check the showWarnings box and run the validation process again.)","title":"Getting Started"},{"location":"getting_started/#getting-started-with-psych-ds","text":"Congratulations on deciding to join the Psych-DS community! By adopting our data standard, not only do you benefit from having a consistent system for structuring and annotating your own scientific data, but you grow the Psych-DS ecosystem as well, increasing the interoperability and organization of behavioral datasets at large. This guide will restate some principles that can be found elsewhere in the Psych-DS Rules and Conventions and the Schema Reference (see navigation bar), but with more of an orientation towards setting up one's first Psych-DS compliant dataset.","title":"Getting Started with Psych-DS"},{"location":"getting_started/#formatting-data-files","text":"Before we begin, let's assume that you have one or more data files that comprise the results of one or more scientific experiments. The content of these files can vary greatly; they may be responses from a Qualtrics Survey, reaction times and responses from a self-paced reading study, answers to a pen-and-paper questionnaire, etc. The first order of business, which may already be taken care of, is to compile your results into any number of tabular CSV files. If you're unfamiliar, CSVs (comma-separated values) are one of several file formats for storing tabular data, i.e. spreadsheets. CSVs can be formatted manually or downloaded/exported from any spreadsheet software, such as Excel, Sheets, or Numbers. Once your data files are formatted as CSVs, you'll have to name them according to the Psych-DS rules. This means choosing a series of keyword pairs to identify each file. To do this, just think of what makes each file different from the others. For instance, if one file represents the results for a whole experiment, the keyword \"study-YourStudy\" may be sufficient. If each file corresponds to a different subject/participant, you might use keywords like \"study-YourStudy\" and \"subject-001\" . Once you've decided on these keyword identifiers, you can string them together using underscores (\"_\") and append the \"_data\" suffix to mark the file as one of your dataset's \"official\" data files. The result might look something like this: \"study-YourStudy_subject-001_data.csv\" .","title":"Formatting Data Files"},{"location":"getting_started/#formatting-folders","text":"To begin with, you'll need a folder to represent your dataset in general. Create an empty folder and name it something that identifies the overarching dataset, like \"MyTestExperiment\" . Within that folder, create another folder called \"data\" . This part is non-negotiable: all Psych-DS compliant datasets must have a \"data\" directory in which all of the official data files for the dataset are stored. We can think of our dataset's \"official\" data files as the ones that are fully cleaned and processed, those that we would input to R for statistical analysis or share publicly as the results of the experiment. Other files, like those in different stages of pre-processing or stored in formats other than CSVs, may also be stored in the data directory, but only those files that follow keyword formatting, use the \"_data\" suffix, and have \".csv\" as an extension will be considered \"official\" and be subject to Psych-DS validation. Within the data directory, you can create any folder structure that suits your needs. Perhaps you want to create a subfolder for each stage of a study, or a subfolder for each month during which sessions were conducted. Regardless of how many subfolders intervene between the data directory and a given data file, Psych-DS will still detect the file and subject it to validation. This principle, for our purposes, is called \"arbitrary nesting\" .","title":"Formatting Folders"},{"location":"getting_started/#creating-metadata","text":"One of the central goals of Psych-DS is to foster good metadata practices. Metadata, to put it simply, is data about data. When we encounter a dataset, we don't just want to know what the results were, we want to know about their context. Who conducted the study, when was it conducted, what publications resulted from it, how should it be cited? Rich, informative metadata files can provide answers to all these questions and more in a standardized, machine readable format. Each Psych-DS dataset is required to include a global metadata file , called \"dataset_description.json\" , in the root folder. As the extension suggests, it must be formatted as a valid JSON file, and additionally, it must function as a valid JSON-LD file, which is a linked data format. If you find the concept of \"linked data\" intimidating, there's no need to worry. It's easy for anyone to create a valid metadata file by modifying one of our basic examples or by making use of user-friendly tools like the CEDAR Metadata Wizard . For purposes of clarity, let's try working from the following example: { \"@context\":\"https://schema.org/\", \"@type\":\"Dataset\", \"name\":\"MyTestExperiment\", \"description\":\"This is an experiment that I am using to try out Psych-DS!\", \"variableMeasured\":[\"variable1\",\"variable2\",\"variable3\"] } As we can see, a JSON file is enclosed in brackets and contains a series of \"key\":\"value\" pairings separated by commas. \"name\" , \"description\" , and \"variableMeasured\" are REQUIRED fields in Psych-DS, so they are included here. Other fields, such as \"author\" , \"citation\" , and \"funder\" are RECOMMENDED . The full list of metadata fields, along with their definitions, can be found under \"Schema_Reference/objects/metadata\" in the navigation bar. The purpose of the \"variableMeasured\" field is to enumerate the various column headers used across all of your data files. So, if your dataset has two data files, and in the first, the column headers are \"variable1\", \"variable2\", \"variable3\", and in the second, they are \"variable1\" and \"variable4\", then the value for your \"variableMeasured\" field should be [\"variable1\",\"variable2\",\"variable3\",\"variable4\"] . As a convenience feature, if you input a dataset with an empty \"variableMeasured\" field into the Psych-DS validator, it will output a suggested value for you based on the data files that it finds.","title":"Creating Metadata"},{"location":"getting_started/#linking-metadata","text":"The \"@context\" and \"@type\" fields are part of what makes this file function as a \"JSON-LD\" linked data object. If you want, you can just include these exactly as they're shown in the above example and never think about them again. For a little more context, when building linked data objects, we want to use semantic vocabularies for our keys and some of our values. This makes the terms we use standardized, unambiguous, and interpretable by machines. So, when we list \"https://schema.org/\" under our \"@context\", we are establishing the Schema.org ontology as the default namespace for our metadata. The ontology, which is widely adopted across the web, is essentially a heirarchy of concepts. So, the most generic concept in the ontology is a \"Thing\" , whereas a more specific concept might be something like a \"Dataset\" . Each of these concepts has a definition as well as certain properties associated with it. When we put \"Dataset\" as the value for the \"@type\" property, we are saying that the entity our metadata describes is a Dataset corresponding to the Schema.org definition. As such, our Dataset object can take certain values, and this is where valid metadata fields like \"name\", \"description\", and \"variableMeasured\" are derived from. Linked data is a powerful tool, and there are other rules that govern how we can use it to create rich, informative metadata, but we'll leave thing here for now. For those interested in taking a deeper dive into this and other concepts, check out the Advanced Practices page.","title":"Linking Metadata"},{"location":"getting_started/#adding-peripheral-materials","text":"In this guide, we've specifically intended to walk you through the base requirements for a Psych-DS compliant dataset, but that doesn't mean that you can't add additional materials related to your experiment(s). Psych-DS encourages the inclusion of such subdirectories within the root directory as materials (for any stimuli, images, videos, etc. used in the process of administering your experiment), documentation (for any documents used in the process, such as consent/debriefing forms), analysis (for any code or other tools used to analyze your data files), and products (for any publications, presentations or posters that resulted from your work). It is also recommended to include a README.md file for general information and a CHANGES.md file to log any changes or updates that you've made since first compiling the dataset. You may add any other arbitrary subdirectories according to your specific needs and preferences. This may result in a validator warning, indicating that you've included files that don't match the schema specifications, but you can suppress these by adding any directories/files that you like to the \".psychds-ignore\" file.","title":"Adding Peripheral Materials"},{"location":"getting_started/#validating-dataset","text":"Now that you have all the necessary pieces in place, it's time to visit the Psych-DS Validator Tool and confirm that what you have is a Psych-DS compliant dataset! Once you have it open, simply click \"select dataset\" and indicate your MyTestExperiment folder. You'll receive your validation results, and if it says VALID , then you're good to go! If it says INVALID , then you'll have to look through the errors reported by the validator and make whatever small adjustments to your dataset are necessary. (Note: if you'd like to see warnings about best practices in addition to error outputs, check the showWarnings box and run the validation process again.)","title":"Validating Dataset"},{"location":"rules_and_conventions/","text":"Psych-DS Rules and Conventions The full technical reference for the Psych-DS rules and conventions is the schema model , whose markdown conversion lives in the \"Schema Reference\" section of the docs (found in navigation bar above). For ease of access and reference, this page enumerates the most crucial elements of the schema in bulleted form, and it can be used as a checklist for thinking about Pysch-DS compliance. Rules (Failure to satisfy these rules results in an error) Datasets must contain a global metadata file named \"dataset_description.json\" in the root directory. The file must use valid JSON formatting and must be a valid JSON-LD linked data file. The file must contain the following fields: name description variableMeasured These required fields must use the schema.org namespace , either by including a \"@context\" field with the value \"https://schema.org\", or by prepending the namespace directly in the field, as in \"https://schema.org/description\". The file must have a field called \"@type\" or \"type\" with the value \"Dataset\" or \"https://schema.org/Dataset\" The \"variableMeasured\" field must be an array containing all of the column headers found across all the official data files for the dataset, either in the form of strings or as JSON objects with \"PropertyValue\" as their \"@type\". The following is an example of a valid global metadata file: { \"name\": \"Example dataset\", \"description\": \"This dataset is just an example\", \"variableMeasured\": ['var1','var2','var3'], \"@type\": \"Dataset\", \"@context\": \"https://schema.org\" } Datasets must contain a subdirectory called \"data\" , located within the root directory. Datasets must include at least one valid data file within the \"data\" subdirectory. Data files can be located anywhere under the \"data\" subdirectory, under any number of nested subdirectories . For instance, they can be located directly within \"data\", or they could be found within nested subdirectories, like \"data/primary_data\". Data files must use the \".csv\" extension and be formatted as valid CSV files . CSVs must be utf-8 encoded and any commas used within the data itself (not as a delimiter within the file format) must be enclosed by double-quotes (\") CSV files must include headers in the first row. Each row of the CSV must have the same number of cells as the header. Names for data files must end with the suffix \"_data\". Names for data files must use keyword formatting , described below: keywords are pairs of keys and values in the format \" - \" keys can be any sequence of lowercase alphabetic characters (\"a-z\") values can be any sequence of upper- and lowercase alphanumeric characters (\"a-zA-Z0-9\") Multiple keywords can be combined together using underscores (\"_\") If a data file includes a column with the header \"row_id\", then that column must contain a unique value in every row. An example of a valid data file: \"data/primary_data/study-123a_subject-aaa1_session-3_data.csv\" In this example, \"study-123a_subject-aaa1_session-3\" are the keywords , \"_data\" is the suffix , and \".csv\" is the extension . Conventions (Failure to follow these recommendations results in a warning) Additional metadata files may be included, called directory metadata and sidecar metadata files. These are to be used when certain aspects of the metadata only apply to a subset of data files, and the same rules of formatting apply to these as with the global metadata file. To apply metadata fields to an entire subdirectory under the \"data\" directory, a file called \"directory_metadata.json\" can be added to that subdirectory. To apply metadata fields to a specific data file, a file that shares the exact same name as the data file in question, but with the \".csv\" extension swapped for \".json\". So, if the data file is called \"study-123a_subject-aaa1_session-3_data.csv\", then the sidecar file must be called \"study-123a_subject-aaa1_session-3_data.json\" and be placed in the same directory. In the validation process, these additional metadata files are combined with the global metadata to form a compiled metadata object for each individual data file. The files are combined according to a principle of inheritance , whereby any fields from a higher-level (i.e. more general, with the global file being the most general) metadata file are replaced if those fields appear in a lower-level file. So, if the global metadata looks like this: { \"name\": \"Example dataset\", \"description\": \"This dataset is just an example\", \"variableMeasured\": ['var1','var2','var3'], \"@type\": \"Dataset\", \"@context\": \"https://schema.org\" } and the sidecar metadata looks like this: { \"variableMeasured\":[\"var4\"] } then the resulting compiled metadata object would look like this: { \"name\": \"Example dataset\", \"description\": \"This dataset is just an example\", \"variableMeasured\": ['var4'], \"@type\": \"Dataset\", \"@context\": \"https://schema.org\" } Note how the \"var4\" did not get *added* to the \"variableMeasured\" field, but instead the entire ['var4'] array *replaced* the original value of field. Metadata files should conform to the type constraints implicit in the Schema.org ontology. For instance, although the value for the \"author\" field can be a string representing a name or a URL representing an individual (such as an ORCID ID), it can also be a JSON of with \"Person\" as its \"@type\". The Schema.org entry for \"author\" specifies that the value of author can be a \"Person\" or anything more specific than a \"Person\", such as a \"Patient\" . If one were to put something incompatible like a \"PropertyValue\" as the value for \"author\", the Psych-DS will throw a warning, as this violates Schema.org type checking. Additionally, warnings will be thrown if a JSON object within the metadata contains a property that is not on Schema.org's list of properties for that type. It is recommended to include such peripheral subdirectories as materials , documentation , analysis , and products within the root directory, as these provide important context for the data at hand and make for a more comprehensive dataset. Namespaces other than \"https://schema.org\" are permitted to be used in metadata files, but a warning will be thrown as the Psych-DS validator has no way of confirming the validity of these external namespaces. When choosing keywords during file naming, it is recommended to choose them from the list of canonical Psych-DS keywords, keeping in mind the definitions provided within the schema. It is permitted to use keywords other than these, but each researcher/lab/community should make sure to adhere to consistent, conventional definitions for these.","title":"Rules and Conventions"},{"location":"rules_and_conventions/#psych-ds-rules-and-conventions","text":"The full technical reference for the Psych-DS rules and conventions is the schema model , whose markdown conversion lives in the \"Schema Reference\" section of the docs (found in navigation bar above). For ease of access and reference, this page enumerates the most crucial elements of the schema in bulleted form, and it can be used as a checklist for thinking about Pysch-DS compliance.","title":"Psych-DS Rules and Conventions"},{"location":"rules_and_conventions/#rules","text":"(Failure to satisfy these rules results in an error) Datasets must contain a global metadata file named \"dataset_description.json\" in the root directory. The file must use valid JSON formatting and must be a valid JSON-LD linked data file. The file must contain the following fields: name description variableMeasured These required fields must use the schema.org namespace , either by including a \"@context\" field with the value \"https://schema.org\", or by prepending the namespace directly in the field, as in \"https://schema.org/description\". The file must have a field called \"@type\" or \"type\" with the value \"Dataset\" or \"https://schema.org/Dataset\" The \"variableMeasured\" field must be an array containing all of the column headers found across all the official data files for the dataset, either in the form of strings or as JSON objects with \"PropertyValue\" as their \"@type\". The following is an example of a valid global metadata file: { \"name\": \"Example dataset\", \"description\": \"This dataset is just an example\", \"variableMeasured\": ['var1','var2','var3'], \"@type\": \"Dataset\", \"@context\": \"https://schema.org\" } Datasets must contain a subdirectory called \"data\" , located within the root directory. Datasets must include at least one valid data file within the \"data\" subdirectory. Data files can be located anywhere under the \"data\" subdirectory, under any number of nested subdirectories . For instance, they can be located directly within \"data\", or they could be found within nested subdirectories, like \"data/primary_data\". Data files must use the \".csv\" extension and be formatted as valid CSV files . CSVs must be utf-8 encoded and any commas used within the data itself (not as a delimiter within the file format) must be enclosed by double-quotes (\") CSV files must include headers in the first row. Each row of the CSV must have the same number of cells as the header. Names for data files must end with the suffix \"_data\". Names for data files must use keyword formatting , described below: keywords are pairs of keys and values in the format \" - \" keys can be any sequence of lowercase alphabetic characters (\"a-z\") values can be any sequence of upper- and lowercase alphanumeric characters (\"a-zA-Z0-9\") Multiple keywords can be combined together using underscores (\"_\") If a data file includes a column with the header \"row_id\", then that column must contain a unique value in every row. An example of a valid data file: \"data/primary_data/study-123a_subject-aaa1_session-3_data.csv\" In this example, \"study-123a_subject-aaa1_session-3\" are the keywords , \"_data\" is the suffix , and \".csv\" is the extension .","title":"Rules"},{"location":"rules_and_conventions/#conventions","text":"(Failure to follow these recommendations results in a warning) Additional metadata files may be included, called directory metadata and sidecar metadata files. These are to be used when certain aspects of the metadata only apply to a subset of data files, and the same rules of formatting apply to these as with the global metadata file. To apply metadata fields to an entire subdirectory under the \"data\" directory, a file called \"directory_metadata.json\" can be added to that subdirectory. To apply metadata fields to a specific data file, a file that shares the exact same name as the data file in question, but with the \".csv\" extension swapped for \".json\". So, if the data file is called \"study-123a_subject-aaa1_session-3_data.csv\", then the sidecar file must be called \"study-123a_subject-aaa1_session-3_data.json\" and be placed in the same directory. In the validation process, these additional metadata files are combined with the global metadata to form a compiled metadata object for each individual data file. The files are combined according to a principle of inheritance , whereby any fields from a higher-level (i.e. more general, with the global file being the most general) metadata file are replaced if those fields appear in a lower-level file. So, if the global metadata looks like this: { \"name\": \"Example dataset\", \"description\": \"This dataset is just an example\", \"variableMeasured\": ['var1','var2','var3'], \"@type\": \"Dataset\", \"@context\": \"https://schema.org\" } and the sidecar metadata looks like this: { \"variableMeasured\":[\"var4\"] } then the resulting compiled metadata object would look like this: { \"name\": \"Example dataset\", \"description\": \"This dataset is just an example\", \"variableMeasured\": ['var4'], \"@type\": \"Dataset\", \"@context\": \"https://schema.org\" } Note how the \"var4\" did not get *added* to the \"variableMeasured\" field, but instead the entire ['var4'] array *replaced* the original value of field. Metadata files should conform to the type constraints implicit in the Schema.org ontology. For instance, although the value for the \"author\" field can be a string representing a name or a URL representing an individual (such as an ORCID ID), it can also be a JSON of with \"Person\" as its \"@type\". The Schema.org entry for \"author\" specifies that the value of author can be a \"Person\" or anything more specific than a \"Person\", such as a \"Patient\" . If one were to put something incompatible like a \"PropertyValue\" as the value for \"author\", the Psych-DS will throw a warning, as this violates Schema.org type checking. Additionally, warnings will be thrown if a JSON object within the metadata contains a property that is not on Schema.org's list of properties for that type. It is recommended to include such peripheral subdirectories as materials , documentation , analysis , and products within the root directory, as these provide important context for the data at hand and make for a more comprehensive dataset. Namespaces other than \"https://schema.org\" are permitted to be used in metadata files, but a warning will be thrown as the Psych-DS validator has no way of confirming the validity of these external namespaces. When choosing keywords during file naming, it is recommended to choose them from the list of canonical Psych-DS keywords, keeping in mind the definitions provided within the schema. It is permitted to use keywords other than these, but each researcher/lab/community should make sure to adhere to consistent, conventional definitions for these.","title":"Conventions"},{"location":"schema_reference/meta/context/","text":"Schema Context The context defines the vocabulary of properties that objects and rules within the schema can use. Properties: schema: (object) The psych-DS schema dataset: (object) Properties and contents of the entire dataset path: (string) Full path of the current file suffix: (string) String following the final '_' in a filename and preceding the '.' of the extension. Used to identify datafiles primarily. extensions: (string) Extension of current file including initial dot stem: (string) Portion of the filename which excludes the extension. level: (string) Property describing the severity of a rule, which determines whether it produces an error, warning, etc. code: (string) Unique code identifying a specific error/warning reason: (string) Paragraph accompanying an error/warning that provides context for what may cause it. directory: (boolean) Indicator for whether a given object is expected to be a directory or a file. arbitraryNesting: (boolean) Indicator for whether a given file object is allowed to be nested within an arbitrary number of subdirectories. usesKeywords: (boolean) Indicator for whether a given file object requires keyword formatting. nonCanonicalKeywordsAllowed: (boolean) Indicator for whether a given file object is required to use only official Psych-DS keywords fileRegex: (regular expression) Regular expression defining the legal formatting of a filename. baseDir: (string) Name of the directory under which the file object is expected to appear. fields: (object) Set of key/value pairs defining the fields that are expected to occur in a given file object, and whether they are required or recommended. namespace: (string) URL identifying the required namespace to be used for required fields in the file object. Namespaces are web prefixes that point to ontologies which contain definitions of semantic vocabularies. jsonld: (boolean) Indicator for whether the given file object is required to be a valid JSON-LD object. containsAllColumns: (boolean) The metadata object, after all inherited sidecars are accounted for, must contain a 'variableMeasured' property listing at least all of the column headers found in the datafile at hand. columnsMatchMetadata: (boolean) Each datafile must only use column headers that appear in the 'variableMeasured' property of the compiled metadata object that corresponds to it. sidecar: (object) Sidecar metadata constructed via the inheritance principle columns: (object) CSV columns, indexed by column header, values are arrays with column contents json: (object) Contents of the current JSON file keywords: (array) List of key-value pairings associated with the data file, derived from the filename","title":"Schema Context"},{"location":"schema_reference/meta/context/#schema-context","text":"The context defines the vocabulary of properties that objects and rules within the schema can use.","title":"Schema Context"},{"location":"schema_reference/meta/context/#properties","text":"schema: (object) The psych-DS schema dataset: (object) Properties and contents of the entire dataset path: (string) Full path of the current file suffix: (string) String following the final '_' in a filename and preceding the '.' of the extension. Used to identify datafiles primarily. extensions: (string) Extension of current file including initial dot stem: (string) Portion of the filename which excludes the extension. level: (string) Property describing the severity of a rule, which determines whether it produces an error, warning, etc. code: (string) Unique code identifying a specific error/warning reason: (string) Paragraph accompanying an error/warning that provides context for what may cause it. directory: (boolean) Indicator for whether a given object is expected to be a directory or a file. arbitraryNesting: (boolean) Indicator for whether a given file object is allowed to be nested within an arbitrary number of subdirectories. usesKeywords: (boolean) Indicator for whether a given file object requires keyword formatting. nonCanonicalKeywordsAllowed: (boolean) Indicator for whether a given file object is required to use only official Psych-DS keywords fileRegex: (regular expression) Regular expression defining the legal formatting of a filename. baseDir: (string) Name of the directory under which the file object is expected to appear. fields: (object) Set of key/value pairs defining the fields that are expected to occur in a given file object, and whether they are required or recommended. namespace: (string) URL identifying the required namespace to be used for required fields in the file object. Namespaces are web prefixes that point to ontologies which contain definitions of semantic vocabularies. jsonld: (boolean) Indicator for whether the given file object is required to be a valid JSON-LD object. containsAllColumns: (boolean) The metadata object, after all inherited sidecars are accounted for, must contain a 'variableMeasured' property listing at least all of the column headers found in the datafile at hand. columnsMatchMetadata: (boolean) Each datafile must only use column headers that appear in the 'variableMeasured' property of the compiled metadata object that corresponds to it. sidecar: (object) Sidecar metadata constructed via the inheritance principle columns: (object) CSV columns, indexed by column header, values are arrays with column contents json: (object) Contents of the current JSON file keywords: (array) List of key-value pairings associated with the data file, derived from the filename","title":"Properties:"},{"location":"schema_reference/meta/defs/arbitraryNesting/","text":"arbitraryNesting Value type: boolean Definition: Indicator for whether a given file object is allowed to be nested within an arbitrary number of subdirectories.","title":"arbitraryNesting"},{"location":"schema_reference/meta/defs/arbitraryNesting/#arbitrarynesting","text":"Value type: boolean Definition: Indicator for whether a given file object is allowed to be nested within an arbitrary number of subdirectories.","title":"arbitraryNesting"},{"location":"schema_reference/meta/defs/baseDir/","text":"baseDir Value type: string Definition: Name of the directory under which the file object is expected to appear.","title":"baseDir"},{"location":"schema_reference/meta/defs/baseDir/#basedir","text":"Value type: string Definition: Name of the directory under which the file object is expected to appear.","title":"baseDir"},{"location":"schema_reference/meta/defs/code/","text":"code Value type: string Definition: Unique code identifying a specific error/warning","title":"code"},{"location":"schema_reference/meta/defs/code/#code","text":"Value type: string Definition: Unique code identifying a specific error/warning","title":"code"},{"location":"schema_reference/meta/defs/columns/","text":"columns Value type: object Definition: CSV columns, indexed by column header, values are arrays with column contents","title":"columns"},{"location":"schema_reference/meta/defs/columns/#columns","text":"Value type: object Definition: CSV columns, indexed by column header, values are arrays with column contents","title":"columns"},{"location":"schema_reference/meta/defs/columnsMatchMetadata/","text":"columnsMatchMetadata Value type: boolean Definition: Each datafile must only use column headers that appear in the 'variableMeasured' property of the compiled metadata object that corresponds to it.","title":"columnsMatchMetadata"},{"location":"schema_reference/meta/defs/columnsMatchMetadata/#columnsmatchmetadata","text":"Value type: boolean Definition: Each datafile must only use column headers that appear in the 'variableMeasured' property of the compiled metadata object that corresponds to it.","title":"columnsMatchMetadata"},{"location":"schema_reference/meta/defs/containsAllColumns/","text":"containsAllColumns Value type: boolean Definition: The metadata object, after all inherited sidecars are accounted for, must contain a 'variableMeasured' property listing at least all of the column headers found in the datafile at hand.","title":"containsAllColumns"},{"location":"schema_reference/meta/defs/containsAllColumns/#containsallcolumns","text":"Value type: boolean Definition: The metadata object, after all inherited sidecars are accounted for, must contain a 'variableMeasured' property listing at least all of the column headers found in the datafile at hand.","title":"containsAllColumns"},{"location":"schema_reference/meta/defs/dataset/","text":"dataset Value type: object Definition: Properties and contents of the entire dataset","title":"dataset"},{"location":"schema_reference/meta/defs/dataset/#dataset","text":"Value type: object Definition: Properties and contents of the entire dataset","title":"dataset"},{"location":"schema_reference/meta/defs/directory/","text":"directory Value type: boolean Definition: Indicator for whether a given object is expected to be a directory or a file.","title":"directory"},{"location":"schema_reference/meta/defs/directory/#directory","text":"Value type: boolean Definition: Indicator for whether a given object is expected to be a directory or a file.","title":"directory"},{"location":"schema_reference/meta/defs/extension/","text":"extension Value type: string Definition: Extension of current file including initial dot","title":"extension"},{"location":"schema_reference/meta/defs/extension/#extension","text":"Value type: string Definition: Extension of current file including initial dot","title":"extension"},{"location":"schema_reference/meta/defs/extensions/","text":"extensions Value type: string Definition: Extension of current file including initial dot","title":"extensions"},{"location":"schema_reference/meta/defs/extensions/#extensions","text":"Value type: string Definition: Extension of current file including initial dot","title":"extensions"},{"location":"schema_reference/meta/defs/fields/","text":"fields Value type: object Definition: Set of key/value pairs defining the fields that are expected to occur in a given file object, and whether they are required or recommended.","title":"fields"},{"location":"schema_reference/meta/defs/fields/#fields","text":"Value type: object Definition: Set of key/value pairs defining the fields that are expected to occur in a given file object, and whether they are required or recommended.","title":"fields"},{"location":"schema_reference/meta/defs/fileRegex/","text":"fileRegex Value type: regular expression Definition: Regular expression defining the legal formatting of a filename.","title":"fileRegex"},{"location":"schema_reference/meta/defs/fileRegex/#fileregex","text":"Value type: regular expression Definition: Regular expression defining the legal formatting of a filename.","title":"fileRegex"},{"location":"schema_reference/meta/defs/json/","text":"json Value type: object Definition: Contents of the current JSON file","title":"json"},{"location":"schema_reference/meta/defs/json/#json","text":"Value type: object Definition: Contents of the current JSON file","title":"json"},{"location":"schema_reference/meta/defs/jsonld/","text":"jsonld Value type: boolean Definition: Indicator for whether the given file object is required to be a valid JSON-LD object.","title":"jsonld"},{"location":"schema_reference/meta/defs/jsonld/#jsonld","text":"Value type: boolean Definition: Indicator for whether the given file object is required to be a valid JSON-LD object.","title":"jsonld"},{"location":"schema_reference/meta/defs/keywords/","text":"keywords Value type: array Definition: List of key-value pairings associated with the data file, derived from the filename Official keywords: study : Label designating a given study site : Label designating the site where the data was collected subject : Label designating the subject corresponding to the data in the file session : Label designating a given session of the study task : Label designating the type of task in which the data was collected condition : Label designating the condition under which the data was collected trial : Label designating the trial associated with the data stimulus : Label designating the stimulus item associated with the data description : Label describing the data file in question","title":"keywords"},{"location":"schema_reference/meta/defs/keywords/#keywords","text":"Value type: array Definition: List of key-value pairings associated with the data file, derived from the filename","title":"keywords"},{"location":"schema_reference/meta/defs/keywords/#official-keywords","text":"study : Label designating a given study site : Label designating the site where the data was collected subject : Label designating the subject corresponding to the data in the file session : Label designating a given session of the study task : Label designating the type of task in which the data was collected condition : Label designating the condition under which the data was collected trial : Label designating the trial associated with the data stimulus : Label designating the stimulus item associated with the data description : Label describing the data file in question","title":"Official keywords:"},{"location":"schema_reference/meta/defs/level/","text":"level Value type: string Definition: Property describing the severity of a rule, which determines whether it produces an error, warning, etc.","title":"level"},{"location":"schema_reference/meta/defs/level/#level","text":"Value type: string Definition: Property describing the severity of a rule, which determines whether it produces an error, warning, etc.","title":"level"},{"location":"schema_reference/meta/defs/namespace/","text":"namespace Value type: string Definition: URL identifying the required namespace to be used for required fields in the file object. Namespaces are web prefixes that point to ontologies which contain definitions of semantic vocabularies.","title":"namespace"},{"location":"schema_reference/meta/defs/namespace/#namespace","text":"Value type: string Definition: URL identifying the required namespace to be used for required fields in the file object. Namespaces are web prefixes that point to ontologies which contain definitions of semantic vocabularies.","title":"namespace"},{"location":"schema_reference/meta/defs/nonCanonicalKeywordsAllowed/","text":"nonCanonicalKeywordsAllowed Value type: boolean Definition: Indicator for whether a given file object is required to use only official Psych-DS keywords","title":"nonCanonicalKeywordsAllowed"},{"location":"schema_reference/meta/defs/nonCanonicalKeywordsAllowed/#noncanonicalkeywordsallowed","text":"Value type: boolean Definition: Indicator for whether a given file object is required to use only official Psych-DS keywords","title":"nonCanonicalKeywordsAllowed"},{"location":"schema_reference/meta/defs/path/","text":"path Value type: string Definition: Full path of the current file","title":"path"},{"location":"schema_reference/meta/defs/path/#path","text":"Value type: string Definition: Full path of the current file","title":"path"},{"location":"schema_reference/meta/defs/reason/","text":"reason Value type: string Definition: Paragraph accompanying an error/warning that provides context for what may cause it.","title":"reason"},{"location":"schema_reference/meta/defs/reason/#reason","text":"Value type: string Definition: Paragraph accompanying an error/warning that provides context for what may cause it.","title":"reason"},{"location":"schema_reference/meta/defs/schema/","text":"schema Value type: object Definition: The psych-DS schema","title":"schema"},{"location":"schema_reference/meta/defs/schema/#schema","text":"Value type: object Definition: The psych-DS schema","title":"schema"},{"location":"schema_reference/meta/defs/sidecar/","text":"sidecar Value type: object Definition: Sidecar metadata constructed via the inheritance principle","title":"sidecar"},{"location":"schema_reference/meta/defs/sidecar/#sidecar","text":"Value type: object Definition: Sidecar metadata constructed via the inheritance principle","title":"sidecar"},{"location":"schema_reference/meta/defs/stem/","text":"stem Value type: string Definition: Portion of the filename which excludes the extension.","title":"stem"},{"location":"schema_reference/meta/defs/stem/#stem","text":"Value type: string Definition: Portion of the filename which excludes the extension.","title":"stem"},{"location":"schema_reference/meta/defs/suffix/","text":"suffix Value type: string Definition: String following the final '_' in a filename and preceding the '.' of the extension. Used to identify datafiles primarily.","title":"suffix"},{"location":"schema_reference/meta/defs/suffix/#suffix","text":"Value type: string Definition: String following the final '_' in a filename and preceding the '.' of the extension. Used to identify datafiles primarily.","title":"suffix"},{"location":"schema_reference/meta/defs/usesKeywords/","text":"usesKeywords Value type: boolean Definition: Indicator for whether a given file object requires keyword formatting.","title":"usesKeywords"},{"location":"schema_reference/meta/defs/usesKeywords/#useskeywords","text":"Value type: boolean Definition: Indicator for whether a given file object requires keyword formatting.","title":"usesKeywords"},{"location":"schema_reference/objects/common_principles/columns/","text":"Columns Definition: In general, Psych-DS has minimal restraints and conventions regarding column names. We RECOMMEND that you use the controlled keywords defined elsewhere in the standard plus \"_id\" as column names if referring to the relevant information in a dataset. (That is, if you record trials with the scope of a given datafile, we RECOMMEND that the name of the column identifying the trial be \"trial_id\"). This information can be redundantly stored (i.e., a file named \"study-MyExp_trial-1_data.csv\" can also have a column \"trial_id\" which has rows with the value \"1\"). In many cases, some combination of columns will uniquely identify every row in the dataset (for instance, each participant might have several rows, but there might be exactly one row for every combination of particupant, condition, and trial.) The column or set of columns provides a unique key for every record/row in your dataset. We RECOMMEND that you include a description of which columns create a unique key for your dataset in the README for your project. If you have a column that uniquely identifies each single row of a dataset explicitly it SHOULD be named \"row_id\". A column named \"row_id\" MUST contain unique values in every row.","title":"Columns"},{"location":"schema_reference/objects/common_principles/columns/#columns","text":"Definition: In general, Psych-DS has minimal restraints and conventions regarding column names. We RECOMMEND that you use the controlled keywords defined elsewhere in the standard plus \"_id\" as column names if referring to the relevant information in a dataset. (That is, if you record trials with the scope of a given datafile, we RECOMMEND that the name of the column identifying the trial be \"trial_id\"). This information can be redundantly stored (i.e., a file named \"study-MyExp_trial-1_data.csv\" can also have a column \"trial_id\" which has rows with the value \"1\"). In many cases, some combination of columns will uniquely identify every row in the dataset (for instance, each participant might have several rows, but there might be exactly one row for every combination of particupant, condition, and trial.) The column or set of columns provides a unique key for every record/row in your dataset. We RECOMMEND that you include a description of which columns create a unique key for your dataset in the README for your project. If you have a column that uniquely identifies each single row of a dataset explicitly it SHOULD be named \"row_id\". A column named \"row_id\" MUST contain unique values in every row.","title":"Columns"},{"location":"schema_reference/objects/common_principles/dataset/","text":"Dataset Definition: A set of behavioral data acquired for the purpose of a particular study or set of studies.","title":"Dataset"},{"location":"schema_reference/objects/common_principles/dataset/#dataset","text":"Definition: A set of behavioral data acquired for the purpose of a particular study or set of studies.","title":"Dataset"},{"location":"schema_reference/objects/common_principles/extension/","text":"File extension Definition: A portion of the file name after the left-most period ( . ) preceded by any other alphanumeric. For example, .gitignore does not have a file extension, but the file extension of 'study-1_data.csv' is '.csv'. Note that the left-most period is included in the file extension.","title":"File extension"},{"location":"schema_reference/objects/common_principles/extension/#file-extension","text":"Definition: A portion of the file name after the left-most period ( . ) preceded by any other alphanumeric. For example, .gitignore does not have a file extension, but the file extension of 'study-1_data.csv' is '.csv'. Note that the left-most period is included in the file extension.","title":"File extension"},{"location":"schema_reference/objects/common_principles/inheritance/","text":"Inheritance Definition: In addition to the mandatory \"dataset_description.json\" file at the root of the dataset, Psych-DS allows for the inclusion of additional metadata files, whose fields apply to specific subsets of the data. There are two types of inherited metadata: Sidecar files, which contain metadata that pertains to one specific datafile. These sidecars must have the exact same name as their corresponding datafile, with the \".json\" extension instead of the \".csv\" extension. Sidecars must occupy the same directory as their datafile. Directory metadata, which always takes the form \"file_metadata.json\". The metadata contained in such files apply to all datafiles within its directory and all subdirectories thereof. Metadata key/value pairs found in higher-level JSON files are inherited by all lower levels unless they are explicitly overridden by a file at the lower level. For example, suppose we have the following project structure: data/ file_metadata.json subject-1/ file_metadata.json subject-1_condition-A_data.csv subject-1_condition-B_data.json subject-1_condition-B_data.csv subject-2/ subject-2_condition-A_data.json subject-2_condition-A_data.csv subject-2_condition-B_data.csv There are 4 datafiles within the data/ hierarchy; let's consider which metadata files apply to each one, and in what order the metadata files should be processed/inherited: - data/subject-1/subject-1_condition-A_data.csv: There is no JSON sidecar for this file. However, there is a file_metadata.json file in the same directory as the data file, as well as in one above it. The consolidated metadata object would start with the contents of the higher-level file (data/file_metadata.json), and then update it with the contents of the lower-level file (data/subject-1/file_metadata.json). - data/subject-1/subject-1_condition-B_data.csv: The same process unfolds as for the previous file; however, the consolidated object is now further updated with the contents of the target data file\u2019s JSON sidecar (i.e., subject-1_condition-B_data.json). - data/subject-2/subject-2_condition-A_data.csv: The contents of data/file_metadata.json are read, and then updated with the contents of data/subject-2/subject-2_condition-A_data.json. - data/subject-2/subject-2_condition-B_data.csv: There is only a single applicable metadata file (data/file_metadata.json), from which all metadata is read. Note that any inherited key/value pair from a metadata file replaces the value for the key wholesale, and there is no merging processed involved. For instance, if the root metadata file contains a \"variableMeasured\" property with 10 elements, and a lower level metadata file contains a \"variableMeasured\" property with 5 elements, the resulting inherited object will only contain the 5 \"variableMeasured\" elements from the inherited metadata. The lists are not combined in any way, but replaced.","title":"Inheritance"},{"location":"schema_reference/objects/common_principles/inheritance/#inheritance","text":"Definition: In addition to the mandatory \"dataset_description.json\" file at the root of the dataset, Psych-DS allows for the inclusion of additional metadata files, whose fields apply to specific subsets of the data. There are two types of inherited metadata: Sidecar files, which contain metadata that pertains to one specific datafile. These sidecars must have the exact same name as their corresponding datafile, with the \".json\" extension instead of the \".csv\" extension. Sidecars must occupy the same directory as their datafile. Directory metadata, which always takes the form \"file_metadata.json\". The metadata contained in such files apply to all datafiles within its directory and all subdirectories thereof. Metadata key/value pairs found in higher-level JSON files are inherited by all lower levels unless they are explicitly overridden by a file at the lower level. For example, suppose we have the following project structure: data/ file_metadata.json subject-1/ file_metadata.json subject-1_condition-A_data.csv subject-1_condition-B_data.json subject-1_condition-B_data.csv subject-2/ subject-2_condition-A_data.json subject-2_condition-A_data.csv subject-2_condition-B_data.csv There are 4 datafiles within the data/ hierarchy; let's consider which metadata files apply to each one, and in what order the metadata files should be processed/inherited: - data/subject-1/subject-1_condition-A_data.csv: There is no JSON sidecar for this file. However, there is a file_metadata.json file in the same directory as the data file, as well as in one above it. The consolidated metadata object would start with the contents of the higher-level file (data/file_metadata.json), and then update it with the contents of the lower-level file (data/subject-1/file_metadata.json). - data/subject-1/subject-1_condition-B_data.csv: The same process unfolds as for the previous file; however, the consolidated object is now further updated with the contents of the target data file\u2019s JSON sidecar (i.e., subject-1_condition-B_data.json). - data/subject-2/subject-2_condition-A_data.csv: The contents of data/file_metadata.json are read, and then updated with the contents of data/subject-2/subject-2_condition-A_data.json. - data/subject-2/subject-2_condition-B_data.csv: There is only a single applicable metadata file (data/file_metadata.json), from which all metadata is read. Note that any inherited key/value pair from a metadata file replaces the value for the key wholesale, and there is no merging processed involved. For instance, if the root metadata file contains a \"variableMeasured\" property with 10 elements, and a lower level metadata file contains a \"variableMeasured\" property with 5 elements, the resulting inherited object will only contain the 5 \"variableMeasured\" elements from the inherited metadata. The lists are not combined in any way, but replaced.","title":"Inheritance"},{"location":"schema_reference/objects/common_principles/keywords/","text":"Keywords Definition: A set of identifying key-value duples associated with a given data file. Keys are limited to a vocabulary of: - study - site - subject - session - task - condition - trial - stimulus - description","title":"Keywords"},{"location":"schema_reference/objects/common_principles/keywords/#keywords","text":"Definition: A set of identifying key-value duples associated with a given data file. Keys are limited to a vocabulary of: - study - site - subject - session - task - condition - trial - stimulus - description","title":"Keywords"},{"location":"schema_reference/objects/common_principles/primary_data/","text":"Primary data Definition: Primary data is considered the first digitized form of the raw data. Sometimes, the primary data and the raw data are the same, in the case, for instance, of tabular online survey responses. If the raw data exists in a physical format, then some digitized version must be included in the dataset.","title":"Primary data"},{"location":"schema_reference/objects/common_principles/primary_data/#primary-data","text":"Definition: Primary data is considered the first digitized form of the raw data. Sometimes, the primary data and the raw data are the same, in the case, for instance, of tabular online survey responses. If the raw data exists in a physical format, then some digitized version must be included in the dataset.","title":"Primary data"},{"location":"schema_reference/objects/common_principles/raw_data/","text":"Raw data Definition: A central principle for Psych-DS is that the earliest form of the data you have access to should always be saved, should never be modified, and should be kept separate from any additional versions created. This data could take any form, such as physical paper and pencil surveys, digital resources such as videos, etc. At a minimum, it is assumed that a psych-DS compliant dataset will contain this original data under the /data directory.","title":"Raw data"},{"location":"schema_reference/objects/common_principles/raw_data/#raw-data","text":"Definition: A central principle for Psych-DS is that the earliest form of the data you have access to should always be saved, should never be modified, and should be kept separate from any additional versions created. This data could take any form, such as physical paper and pencil surveys, digital resources such as videos, etc. At a minimum, it is assumed that a psych-DS compliant dataset will contain this original data under the /data directory.","title":"Raw data"},{"location":"schema_reference/objects/extensions/csv/","text":"Comma-Separated Values Definition: A CSV file with a header row of column names spanning all filled columns. In Psych-DS, CSV files have the following rules related to their formatting: - Each CSV file MUST start with a header line listing the names of all columns. Names MUST be separated with commas. - String values containing commas MUST be escaped using double quotes - UTF-8 encoding MUST be used - using . rather than , for decimals is RECOMMENDED","title":"Comma-Separated Values"},{"location":"schema_reference/objects/extensions/csv/#comma-separated-values","text":"Definition: A CSV file with a header row of column names spanning all filled columns. In Psych-DS, CSV files have the following rules related to their formatting: - Each CSV file MUST start with a header line listing the names of all columns. Names MUST be separated with commas. - String values containing commas MUST be escaped using double quotes - UTF-8 encoding MUST be used - using . rather than , for decimals is RECOMMENDED","title":"Comma-Separated Values"},{"location":"schema_reference/objects/extensions/json/","text":"JavaScript Object Notation Definition: A JSON file. Top-level and collated metadata files are all stored in the JSON format in psych-DS.","title":"JavaScript Object Notation"},{"location":"schema_reference/objects/extensions/json/#javascript-object-notation","text":"Definition: A JSON file. Top-level and collated metadata files are all stored in the JSON format in psych-DS.","title":"JavaScript Object Notation"},{"location":"schema_reference/objects/files/","text":"README File type: regular Definition: Human-readable file describing the project and dataset in detail. This is an OPTIONAL file, and only one README file should appear in dataset.","title":"README"},{"location":"schema_reference/objects/files/#readme","text":"File type: regular Definition: Human-readable file describing the project and dataset in detail. This is an OPTIONAL file, and only one README file should appear in dataset.","title":"README"},{"location":"schema_reference/objects/files/CHANGES/","text":"Changelog File type: regular Definition: Version history of the dataset (describing changes, updates and corrections) MAY be provided in the form of a 'CHANGES' text file. (.txt or .md).","title":"Changelog"},{"location":"schema_reference/objects/files/CHANGES/#changelog","text":"File type: regular Definition: Version history of the dataset (describing changes, updates and corrections) MAY be provided in the form of a 'CHANGES' text file. (.txt or .md).","title":"Changelog"},{"location":"schema_reference/objects/files/CompiledMetadata/","text":"Compiled Metadata File type: composite Definition: The metadata object that results from the combination of global metadata and directory- and file-level metadata files according to the rules of inheritance.","title":"Compiled Metadata"},{"location":"schema_reference/objects/files/CompiledMetadata/#compiled-metadata","text":"File type: composite Definition: The metadata object that results from the combination of global metadata and directory- and file-level metadata files according to the rules of inheritance.","title":"Compiled Metadata"},{"location":"schema_reference/objects/files/DataFile/","text":"CSV Datafile File type: regular Definition: A CSV file under the /data directory in which the official psych-DS compliant data from the dataset is stored. Datafiles must follow Psych-DS file naming conventions, which includes the use of keyword formatting, the '_data' suffix, and the '.csv' extension. An example of a valid datafile might be 'study-123_site-lab4_data.csv'. In the future, more official suffices and extensions may be made available. A controlled list of official keywords is provided, but the use of unofficial keywords is permitted, so long as they are clearly defined and used consistently within a research community.","title":"CSV Datafile"},{"location":"schema_reference/objects/files/DataFile/#csv-datafile","text":"File type: regular Definition: A CSV file under the /data directory in which the official psych-DS compliant data from the dataset is stored. Datafiles must follow Psych-DS file naming conventions, which includes the use of keyword formatting, the '_data' suffix, and the '.csv' extension. An example of a valid datafile might be 'study-123_site-lab4_data.csv'. In the future, more official suffices and extensions may be made available. A controlled list of official keywords is provided, but the use of unofficial keywords is permitted, so long as they are clearly defined and used consistently within a research community.","title":"CSV Datafile"},{"location":"schema_reference/objects/files/DirectoryMetadata/","text":"Directory Metadata File type: regular Definition: A json file in which to store metadata that applies to all datafiles within the containing directory or within any nested subdirectories. Fields from the file replace the values of the global dataset_description object.","title":"Directory Metadata"},{"location":"schema_reference/objects/files/DirectoryMetadata/#directory-metadata","text":"File type: regular Definition: A json file in which to store metadata that applies to all datafiles within the containing directory or within any nested subdirectories. Fields from the file replace the values of the global dataset_description object.","title":"Directory Metadata"},{"location":"schema_reference/objects/files/SidecarMetadata/","text":"Sidecar Metadata File type: regular Definition: A json file in which to store metadata that applies to a specific datafile within the containing directory. Fields from the file replace the values of the global dataset_description object, and overwrite any fields shared with the directory metadata.","title":"Sidecar Metadata"},{"location":"schema_reference/objects/files/SidecarMetadata/#sidecar-metadata","text":"File type: regular Definition: A json file in which to store metadata that applies to a specific datafile within the containing directory. Fields from the file replace the values of the global dataset_description object, and overwrite any fields shared with the directory metadata.","title":"Sidecar Metadata"},{"location":"schema_reference/objects/files/analysis/","text":"Analysis File type: directory Definition: A directory to store code or other tools used to analyze the data/ files in order to describe and interpret the dataset. Any intermediate data files created during analysis SHOULD be output to a new file in data/ (i.e. primary_data/ files SHOULD NOT be modified.)","title":"Analysis"},{"location":"schema_reference/objects/files/analysis/#analysis","text":"File type: directory Definition: A directory to store code or other tools used to analyze the data/ files in order to describe and interpret the dataset. Any intermediate data files created during analysis SHOULD be output to a new file in data/ (i.e. primary_data/ files SHOULD NOT be modified.)","title":"Analysis"},{"location":"schema_reference/objects/files/data/","text":"Data File type: directory Definition: The directory in which to store all datafiles from the dataset.","title":"Data"},{"location":"schema_reference/objects/files/data/#data","text":"File type: directory Definition: The directory in which to store all datafiles from the dataset.","title":"Data"},{"location":"schema_reference/objects/files/dataset_description/","text":"Dataset Description File type: regular Definition: The metadata file 'dataset_description.json' is a JSON file describing the dataset.","title":"Dataset Description"},{"location":"schema_reference/objects/files/dataset_description/#dataset-description","text":"File type: regular Definition: The metadata file 'dataset_description.json' is a JSON file describing the dataset.","title":"Dataset Description"},{"location":"schema_reference/objects/files/documentation/","text":"Documentation File type: directory Definition: A directory in which to store any project-related documentation that is used for conducting the study (e.g. consent forms)","title":"Documentation"},{"location":"schema_reference/objects/files/documentation/#documentation","text":"File type: directory Definition: A directory in which to store any project-related documentation that is used for conducting the study (e.g. consent forms)","title":"Documentation"},{"location":"schema_reference/objects/files/materials/","text":"Materials File type: directory Definition: A directory in which to store any materials used to conduct the study.","title":"Materials"},{"location":"schema_reference/objects/files/materials/#materials","text":"File type: directory Definition: A directory in which to store any materials used to conduct the study.","title":"Materials"},{"location":"schema_reference/objects/files/primary_data/","text":"Primary data File type: directory Definition: A subfolder holding the primary data, which may be either Psych-DS compliant CSV or some other file type","title":"Primary data"},{"location":"schema_reference/objects/files/primary_data/#primary-data","text":"File type: directory Definition: A subfolder holding the primary data, which may be either Psych-DS compliant CSV or some other file type","title":"Primary data"},{"location":"schema_reference/objects/files/products/","text":"Products File type: directory Definition: A directory in which to store any Any relevant products resulting from the project (e.g., publications, posters, software descriptions, presentations, etc.)","title":"Products"},{"location":"schema_reference/objects/files/products/#products","text":"File type: directory Definition: A directory in which to store any Any relevant products resulting from the project (e.g., publications, posters, software descriptions, presentations, etc.)","title":"Products"},{"location":"schema_reference/objects/files/results/","text":"Results File type: directory Definition: A directory in which to store any results generated using the data in /data.","title":"Results"},{"location":"schema_reference/objects/files/results/#results","text":"File type: directory Definition: A directory in which to store any results generated using the data in /data.","title":"Results"},{"location":"schema_reference/objects/metadata/author/","text":"Author Value type: array Definition: List of individuals who contributed to the creation/curation of the dataset.","title":"Author"},{"location":"schema_reference/objects/metadata/author/#author","text":"Value type: array Definition: List of individuals who contributed to the creation/curation of the dataset.","title":"Author"},{"location":"schema_reference/objects/metadata/citation/","text":"Citation Value type: string Definition: Citation data for referencing the dataset, or URL/path for structured citation file.","title":"Citation"},{"location":"schema_reference/objects/metadata/citation/#citation","text":"Value type: string Definition: Citation data for referencing the dataset, or URL/path for structured citation file.","title":"Citation"},{"location":"schema_reference/objects/metadata/description/","text":"Description Value type: string Definition: Detailed description of the dataset.","title":"Description"},{"location":"schema_reference/objects/metadata/description/#description","text":"Value type: string Definition: Detailed description of the dataset.","title":"Description"},{"location":"schema_reference/objects/metadata/funder/","text":"Funder Value type: string Definition: List of sources of funding (grant numbers).","title":"Funder"},{"location":"schema_reference/objects/metadata/funder/#funder","text":"Value type: string Definition: List of sources of funding (grant numbers).","title":"Funder"},{"location":"schema_reference/objects/metadata/identifier/","text":"Identifier Value type: string Definition: Identifier that uniquely distinguishes the dataset.","title":"Identifier"},{"location":"schema_reference/objects/metadata/identifier/#identifier","text":"Value type: string Definition: Identifier that uniquely distinguishes the dataset.","title":"Identifier"},{"location":"schema_reference/objects/metadata/keywords/","text":"Keywords Value type: array Definition: Keywords with which to tag the dataset for reference.","title":"Keywords"},{"location":"schema_reference/objects/metadata/keywords/#keywords","text":"Value type: array Definition: Keywords with which to tag the dataset for reference.","title":"Keywords"},{"location":"schema_reference/objects/metadata/license/","text":"Kucebse Value type: string Definition: Author-assigned 'license' for data/material use. While this can be a string of text, a URL pointing to a specific license file (online or in the project directory) is preferred.","title":"Kucebse"},{"location":"schema_reference/objects/metadata/license/#kucebse","text":"Value type: string Definition: Author-assigned 'license' for data/material use. While this can be a string of text, a URL pointing to a specific license file (online or in the project directory) is preferred.","title":"Kucebse"},{"location":"schema_reference/objects/metadata/name/","text":"Name Value type: string Definition: Name of the dataset.","title":"Name"},{"location":"schema_reference/objects/metadata/name/#name","text":"Value type: string Definition: Name of the dataset.","title":"Name"},{"location":"schema_reference/objects/metadata/schemaVersion/","text":"Schema Version Value type: string Definition: The version of the data specification that this dataset conforms to.","title":"Schema Version"},{"location":"schema_reference/objects/metadata/schemaVersion/#schema-version","text":"Value type: string Definition: The version of the data specification that this dataset conforms to.","title":"Schema Version"},{"location":"schema_reference/objects/metadata/url/","text":"URL Value type: string Definition: Canonical source for the dataset.","title":"URL"},{"location":"schema_reference/objects/metadata/url/#url","text":"Value type: string Definition: Canonical source for the dataset.","title":"URL"},{"location":"schema_reference/objects/metadata/usageInfo/","text":"Privacy Policy Value type: string Definition: A string to indicate whether any of the values in the dataset are desired to be shareable. This does not guarantee that the dataset HAS been shared or HAS been de identified,.","title":"Privacy Policy"},{"location":"schema_reference/objects/metadata/usageInfo/#privacy-policy","text":"Value type: string Definition: A string to indicate whether any of the values in the dataset are desired to be shareable. This does not guarantee that the dataset HAS been shared or HAS been de identified,.","title":"Privacy Policy"},{"location":"schema_reference/objects/metadata/variableMeasured/","text":"Variable Measured Value type: array Definition: List of the column names that appear in the data files.","title":"Variable Measured"},{"location":"schema_reference/objects/metadata/variableMeasured/#variable-measured","text":"Value type: array Definition: List of the column names that appear in the data files.","title":"Variable Measured"},{"location":"schema_reference/rules/compiled_metadata/CompiledMetadata/","text":"CompiledMetadata fields : {'name': 'required', 'description': 'required', 'variableMeasured': 'required', 'author': 'recommended', 'citation': 'recommended', 'license': 'recommended', 'funder': 'recommended', 'url': 'recommended', 'identifier': 'recommended', 'privacyPolicy': 'recommended', 'keywords': 'recommended'} namespace : http://schema.org/ jsonld : True containsAllColumns : True","title":"CompiledMetadata"},{"location":"schema_reference/rules/compiled_metadata/CompiledMetadata/#compiledmetadata","text":"fields : {'name': 'required', 'description': 'required', 'variableMeasured': 'required', 'author': 'recommended', 'citation': 'recommended', 'license': 'recommended', 'funder': 'recommended', 'url': 'recommended', 'identifier': 'recommended', 'privacyPolicy': 'recommended', 'keywords': 'recommended'} namespace : http://schema.org/ jsonld : True containsAllColumns : True","title":"CompiledMetadata"},{"location":"schema_reference/rules/compiled_metadata/compiled_metadata/","text":"compiled_metadata fields : {'name': 'required', 'description': 'required', 'variableMeasured': 'required', 'author': 'recommended', 'citation': 'recommended', 'license': 'recommended', 'funder': 'recommended', 'url': 'recommended', 'identifier': 'recommended', 'privacyPolicy': 'recommended', 'keywords': 'recommended'} namespace : http://schema.org/ jsonld : True containsAllColumns : True","title":"compiled_metadata"},{"location":"schema_reference/rules/compiled_metadata/compiled_metadata/#compiled_metadata","text":"fields : {'name': 'required', 'description': 'required', 'variableMeasured': 'required', 'author': 'recommended', 'citation': 'recommended', 'license': 'recommended', 'funder': 'recommended', 'url': 'recommended', 'identifier': 'recommended', 'privacyPolicy': 'recommended', 'keywords': 'recommended'} namespace : http://schema.org/ jsonld : True containsAllColumns : True","title":"compiled_metadata"},{"location":"schema_reference/rules/csv_data/Datafile/","text":"Datafile columnsMatchMetadata : True","title":"Datafile"},{"location":"schema_reference/rules/csv_data/Datafile/#datafile","text":"columnsMatchMetadata : True","title":"Datafile"},{"location":"schema_reference/rules/errors/CsvColumnMissing/","text":"CsvColumnMissing CODE : CSV_COLUMN_MISSING level : error reason : A required column is missing","title":"CsvColumnMissing"},{"location":"schema_reference/rules/errors/CsvColumnMissing/#csvcolumnmissing","text":"CODE : CSV_COLUMN_MISSING level : error reason : A required column is missing","title":"CsvColumnMissing"},{"location":"schema_reference/rules/errors/EmptyFile/","text":"EmptyFile CODE : EMPTY_FILE level : error reason : empty files not allowed.","title":"EmptyFile"},{"location":"schema_reference/rules/errors/EmptyFile/#emptyfile","text":"CODE : EMPTY_FILE level : error reason : empty files not allowed.","title":"EmptyFile"},{"location":"schema_reference/rules/errors/ExtensionMismatch/","text":"ExtensionMismatch CODE : EXTENSION_MISMATCH level : error reason : Extension used by file does not match allowed extensions for its suffix.","title":"ExtensionMismatch"},{"location":"schema_reference/rules/errors/ExtensionMismatch/#extensionmismatch","text":"CODE : EXTENSION_MISMATCH level : error reason : Extension used by file does not match allowed extensions for its suffix.","title":"ExtensionMismatch"},{"location":"schema_reference/rules/errors/FileRead/","text":"FileRead CODE : FILE_READ level : error reason : We were unable to read this file. Make sure it contains data (file size > 0 kB) and is not corrupted, incorrectly named, or incorrectly symlinked.","title":"FileRead"},{"location":"schema_reference/rules/errors/FileRead/#fileread","text":"CODE : FILE_READ level : error reason : We were unable to read this file. Make sure it contains data (file size > 0 kB) and is not corrupted, incorrectly named, or incorrectly symlinked.","title":"FileRead"},{"location":"schema_reference/rules/errors/HeaderRowMismatch/","text":"HeaderRowMismatch CODE : HEADER_ROW_MISMATCH level : error reason : The header and all rows for CSV data files must contain the same number of columns.","title":"HeaderRowMismatch"},{"location":"schema_reference/rules/errors/HeaderRowMismatch/#headerrowmismatch","text":"CODE : HEADER_ROW_MISMATCH level : error reason : The header and all rows for CSV data files must contain the same number of columns.","title":"HeaderRowMismatch"},{"location":"schema_reference/rules/errors/IncorrectDatasetType/","text":"IncorrectDatasetType CODE : INCORRECT_DATASET_TYPE level : error reason : Your metadata is missing the required schema.org \"Dataset\" type","title":"IncorrectDatasetType"},{"location":"schema_reference/rules/errors/IncorrectDatasetType/#incorrectdatasettype","text":"CODE : INCORRECT_DATASET_TYPE level : error reason : Your metadata is missing the required schema.org \"Dataset\" type","title":"IncorrectDatasetType"},{"location":"schema_reference/rules/errors/InvalidJsonEncoding/","text":"InvalidJsonEncoding CODE : INVALID_JSON_ENCODING level : error reason : JSON files must be valid utf-8.","title":"InvalidJsonEncoding"},{"location":"schema_reference/rules/errors/InvalidJsonEncoding/#invalidjsonencoding","text":"CODE : INVALID_JSON_ENCODING level : error reason : JSON files must be valid utf-8.","title":"InvalidJsonEncoding"},{"location":"schema_reference/rules/errors/InvalidJsonFormatting/","text":"InvalidJsonFormatting CODE : INVALID_JSON_FORMATTING level : error reason : One of your metadata files in not in valid JSON format.","title":"InvalidJsonFormatting"},{"location":"schema_reference/rules/errors/InvalidJsonFormatting/#invalidjsonformatting","text":"CODE : INVALID_JSON_FORMATTING level : error reason : One of your metadata files in not in valid JSON format.","title":"InvalidJsonFormatting"},{"location":"schema_reference/rules/errors/InvalidObjectType/","text":"InvalidObjectType CODE : INVALID_OBJECT_TYPE level : warning reason : Properties in the schema.org ontology have selective restrictions on which types of objects can be used for their values. including an object with a @type that does not match the selective restrictions of its property is not an error in psych-DS, but it will result in the object in question not being interpretable by machines.","title":"InvalidObjectType"},{"location":"schema_reference/rules/errors/InvalidObjectType/#invalidobjecttype","text":"CODE : INVALID_OBJECT_TYPE level : warning reason : Properties in the schema.org ontology have selective restrictions on which types of objects can be used for their values. including an object with a @type that does not match the selective restrictions of its property is not an error in psych-DS, but it will result in the object in question not being interpretable by machines.","title":"InvalidObjectType"},{"location":"schema_reference/rules/errors/InvalidSchemaorgProperty/","text":"InvalidSchemaorgProperty CODE : INVALID_SCHEMAORG_PROPERTY level : warning reason : The schema.org ontology contains a fixed set of legal properties which can be applied to objects within the metadata. If schema.org is used as the only @context within your metadata, then all properties will be interpreted as schema.org properties. Using an invalid schema.org property is not considered an error in the psych-DS specification, but it should be understood that such usages result in the property in question not being interpretable by machines.","title":"InvalidSchemaorgProperty"},{"location":"schema_reference/rules/errors/InvalidSchemaorgProperty/#invalidschemaorgproperty","text":"CODE : INVALID_SCHEMAORG_PROPERTY level : warning reason : The schema.org ontology contains a fixed set of legal properties which can be applied to objects within the metadata. If schema.org is used as the only @context within your metadata, then all properties will be interpreted as schema.org properties. Using an invalid schema.org property is not considered an error in the psych-DS specification, but it should be understood that such usages result in the property in question not being interpretable by machines.","title":"InvalidSchemaorgProperty"},{"location":"schema_reference/rules/errors/JsonInvalid/","text":"JsonInvalid CODE : JSON_INVALID level : error reason : Not a valid JSON file.","title":"JsonInvalid"},{"location":"schema_reference/rules/errors/JsonInvalid/#jsoninvalid","text":"CODE : JSON_INVALID level : error reason : Not a valid JSON file.","title":"JsonInvalid"},{"location":"schema_reference/rules/errors/JsonKeyRecommended/","text":"JsonKeyRecommended CODE : JSON_KEY_RECOMMENDED level : warning, reason : A data files JSON sidecar is missing a key listed as recommended.","title":"JsonKeyRecommended"},{"location":"schema_reference/rules/errors/JsonKeyRecommended/#jsonkeyrecommended","text":"CODE : JSON_KEY_RECOMMENDED level : warning, reason : A data files JSON sidecar is missing a key listed as recommended.","title":"JsonKeyRecommended"},{"location":"schema_reference/rules/errors/JsonKeyRequired/","text":"JsonKeyRequired CODE : JSON_KEY_REQUIRED level : error reason : The dataset_description.json file is missing a key listed as required.","title":"JsonKeyRequired"},{"location":"schema_reference/rules/errors/JsonKeyRequired/#jsonkeyrequired","text":"CODE : JSON_KEY_REQUIRED level : error reason : The dataset_description.json file is missing a key listed as required.","title":"JsonKeyRequired"},{"location":"schema_reference/rules/errors/JsonSchemaValidationError/","text":"JsonSchemaValidationError CODE : JSON_SCHEMA_VALIDATION_ERROR level : error reason : Invalid JSON file. The file is not formatted according the schema.","title":"JsonSchemaValidationError"},{"location":"schema_reference/rules/errors/JsonSchemaValidationError/#jsonschemavalidationerror","text":"CODE : JSON_SCHEMA_VALIDATION_ERROR level : error reason : Invalid JSON file. The file is not formatted according the schema.","title":"JsonSchemaValidationError"},{"location":"schema_reference/rules/errors/KeywordFormattingError/","text":"KeywordFormattingError CODE : KEYWORD_FORMATTING_ERROR level : error reason : All datafiles must use psych-DS keyword formatting. That is, datafile names must consist of a series of keyword-value pairs, separated by underscores, with keywords using only lowercase alphabetic characters and values using any alphanumeric characters of either case. The file must end with ' data.csv'. In other words, files must follow this regex: /([a-z]+-[a-zA-Z0-9]+)( [a-z]+-[a-zA-Z0-9]+)*_data.csv/","title":"KeywordFormattingError"},{"location":"schema_reference/rules/errors/KeywordFormattingError/#keywordformattingerror","text":"CODE : KEYWORD_FORMATTING_ERROR level : error reason : All datafiles must use psych-DS keyword formatting. That is, datafile names must consist of a series of keyword-value pairs, separated by underscores, with keywords using only lowercase alphabetic characters and values using any alphanumeric characters of either case. The file must end with ' data.csv'. In other words, files must follow this regex: /([a-z]+-[a-zA-Z0-9]+)( [a-z]+-[a-zA-Z0-9]+)*_data.csv/","title":"KeywordFormattingError"},{"location":"schema_reference/rules/errors/MissingDatasetType/","text":"MissingDatasetType CODE : MISSING_DATASET_TYPE level : error reason : Your metadata is missing the \"@type/type\" property, which is required.","title":"MissingDatasetType"},{"location":"schema_reference/rules/errors/MissingDatasetType/#missingdatasettype","text":"CODE : MISSING_DATASET_TYPE level : error reason : Your metadata is missing the \"@type/type\" property, which is required.","title":"MissingDatasetType"},{"location":"schema_reference/rules/errors/MissingRequiredElement/","text":"MissingRequiredElement CODE : MISSING_REQUIRED_ELEMENT level : error reason : Your dataset is missing an element that is required under the psych-DS specification.","title":"MissingRequiredElement"},{"location":"schema_reference/rules/errors/MissingRequiredElement/#missingrequiredelement","text":"CODE : MISSING_REQUIRED_ELEMENT level : error reason : Your dataset is missing an element that is required under the psych-DS specification.","title":"MissingRequiredElement"},{"location":"schema_reference/rules/errors/NoHeader/","text":"NoHeader CODE : NO_HEADER level : error reason : CSV data files must contain a valid header with at least one column.","title":"NoHeader"},{"location":"schema_reference/rules/errors/NoHeader/#noheader","text":"CODE : NO_HEADER level : error reason : CSV data files must contain a valid header with at least one column.","title":"NoHeader"},{"location":"schema_reference/rules/errors/NotIncluded/","text":"NotIncluded CODE : NOT_INCLUDED level : warning reason : Files with such naming scheme are not part of psych-DS specification. Under the rules of psych-DS, non-specified files are allowed to be included, but if you would like to avoid receiving this warning moving forward, you can include in your \".psychdsignore\" file","title":"NotIncluded"},{"location":"schema_reference/rules/errors/NotIncluded/#notincluded","text":"CODE : NOT_INCLUDED level : warning reason : Files with such naming scheme are not part of psych-DS specification. Under the rules of psych-DS, non-specified files are allowed to be included, but if you would like to avoid receiving this warning moving forward, you can include in your \".psychdsignore\" file","title":"NotIncluded"},{"location":"schema_reference/rules/errors/ObjectTypeMissing/","text":"ObjectTypeMissing CODE : OBJECT_TYPE_MISSING level : warning reason : For compliance with the schema.org ontology, all objects within the metadata (with a few exceptions) that appear as the value of a schema.org key/property must contain a \"@type\" key with a valid schema.org type as its value.","title":"ObjectTypeMissing"},{"location":"schema_reference/rules/errors/ObjectTypeMissing/#objecttypemissing","text":"CODE : OBJECT_TYPE_MISSING level : warning reason : For compliance with the schema.org ontology, all objects within the metadata (with a few exceptions) that appear as the value of a schema.org key/property must contain a \"@type\" key with a valid schema.org type as its value.","title":"ObjectTypeMissing"},{"location":"schema_reference/rules/errors/RowidValuesNotUnique/","text":"RowidValuesNotUnique CODE : ROWID_VALUES_NOT_UNIQUE level : error reason : Columns within CSV data files with the header \"row_id\" must contain unique values in every row.","title":"RowidValuesNotUnique"},{"location":"schema_reference/rules/errors/RowidValuesNotUnique/#rowidvaluesnotunique","text":"CODE : ROWID_VALUES_NOT_UNIQUE level : error reason : Columns within CSV data files with the header \"row_id\" must contain unique values in every row.","title":"RowidValuesNotUnique"},{"location":"schema_reference/rules/errors/UnknownNamespace/","text":"UnknownNamespace CODE : UNKNOWN_NAMESPACE level : warning reason : The psych-DS validator only has access to one external vocabulary, \"http://schema.org\"; any other reference to an external schema is permitted, but the validity of the terms used cannot be confirmed.","title":"UnknownNamespace"},{"location":"schema_reference/rules/errors/UnknownNamespace/#unknownnamespace","text":"CODE : UNKNOWN_NAMESPACE level : warning reason : The psych-DS validator only has access to one external vocabulary, \"http://schema.org\"; any other reference to an external schema is permitted, but the validity of the terms used cannot be confirmed.","title":"UnknownNamespace"},{"location":"schema_reference/rules/errors/UnofficialKeywordError/","text":"UnofficialKeywordError CODE : UNOFFICIAL_KEYWORD_ERROR level : error reason : Names for data files must not include keywords other than those listed in the psych-DS schema.","title":"UnofficialKeywordError"},{"location":"schema_reference/rules/errors/UnofficialKeywordError/#unofficialkeyworderror","text":"CODE : UNOFFICIAL_KEYWORD_ERROR level : error reason : Names for data files must not include keywords other than those listed in the psych-DS schema.","title":"UnofficialKeywordError"},{"location":"schema_reference/rules/errors/UnofficialKeywordWarning/","text":"UnofficialKeywordWarning CODE : UNOFFICIAL_KEYWORD_WARNING level : warning reason : Although it is not recommended, datafiles are permitted to use keywords other than those provided in the official psych-DS specification. If you do choose to use unofficial keywords, please ensure that they are clearly defined within your research community and used consistently across relevant datasets.","title":"UnofficialKeywordWarning"},{"location":"schema_reference/rules/errors/UnofficialKeywordWarning/#unofficialkeywordwarning","text":"CODE : UNOFFICIAL_KEYWORD_WARNING level : warning reason : Although it is not recommended, datafiles are permitted to use keywords other than those provided in the official psych-DS specification. If you do choose to use unofficial keywords, please ensure that they are clearly defined within your research community and used consistently across relevant datasets.","title":"UnofficialKeywordWarning"},{"location":"schema_reference/rules/errors/WrongMetadataLocation/","text":"WrongMetadataLocation CODE : WRONG_METADATA_LOCATION level : warning reason : The main metadata file must be located within the root directory","title":"WrongMetadataLocation"},{"location":"schema_reference/rules/errors/WrongMetadataLocation/#wrongmetadatalocation","text":"CODE : WRONG_METADATA_LOCATION level : warning reason : The main metadata file must be located within the root directory","title":"WrongMetadataLocation"},{"location":"schema_reference/rules/files/common/core/","text":"README baseDir : / stem : README arbitraryNesting : False extensions : ['.md', '.txt'] If file/directory not found : code: MISSING_README_DOC level: warning reason: It is recommended to include a 'README.md' or 'README.txt' file in the base directory","title":"Index"},{"location":"schema_reference/rules/files/common/core/#readme","text":"baseDir : / stem : README arbitraryNesting : False extensions : ['.md', '.txt'] If file/directory not found : code: MISSING_README_DOC level: warning reason: It is recommended to include a 'README.md' or 'README.txt' file in the base directory","title":"README"},{"location":"schema_reference/rules/files/common/core/CHANGES/","text":"CHANGES baseDir : / stem : CHANGES arbitraryNesting : False extensions : ['.md', '.txt'] If file/directory not found : code: MISSING_CHANGES_DOC level: ignore reason: It is recommended to include a 'CHANGES.md' or 'CHANGES.txt' file in the base directory","title":"CHANGES"},{"location":"schema_reference/rules/files/common/core/CHANGES/#changes","text":"baseDir : / stem : CHANGES arbitraryNesting : False extensions : ['.md', '.txt'] If file/directory not found : code: MISSING_CHANGES_DOC level: ignore reason: It is recommended to include a 'CHANGES.md' or 'CHANGES.txt' file in the base directory","title":"CHANGES"},{"location":"schema_reference/rules/files/common/core/analysis/","text":"analysis path : /analysis directory : True If file/directory not found : code: MISSING_ANALYSIS_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'analysis' in the base directory","title":"Analysis"},{"location":"schema_reference/rules/files/common/core/analysis/#analysis","text":"path : /analysis directory : True If file/directory not found : code: MISSING_ANALYSIS_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'analysis' in the base directory","title":"analysis"},{"location":"schema_reference/rules/files/common/core/data/","text":"data path : /data directory : True If file/directory not found : code: MISSING_DATA_DIRECTORY level: error reason: It is required to include a subdirectory named 'data' in the base directory","title":"Data"},{"location":"schema_reference/rules/files/common/core/data/#data","text":"path : /data directory : True If file/directory not found : code: MISSING_DATA_DIRECTORY level: error reason: It is required to include a subdirectory named 'data' in the base directory","title":"data"},{"location":"schema_reference/rules/files/common/core/dataset_description/","text":"dataset_description baseDir : / stem : dataset_description arbitraryNesting : False extensions : ['.json'] If file/directory not found : code: MISSING_DATASET_DESCRIPTION level: error reason: It is required to include a 'dataset_description.json' in the base directory","title":"Dataset description"},{"location":"schema_reference/rules/files/common/core/dataset_description/#dataset_description","text":"baseDir : / stem : dataset_description arbitraryNesting : False extensions : ['.json'] If file/directory not found : code: MISSING_DATASET_DESCRIPTION level: error reason: It is required to include a 'dataset_description.json' in the base directory","title":"dataset_description"},{"location":"schema_reference/rules/files/common/core/documentation/","text":"documentation path : /documentation directory : True If file/directory not found : code: MISSING_DOCUMENTATION_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'documentation' in the base directory","title":"Documentation"},{"location":"schema_reference/rules/files/common/core/documentation/#documentation","text":"path : /documentation directory : True If file/directory not found : code: MISSING_DOCUMENTATION_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'documentation' in the base directory","title":"documentation"},{"location":"schema_reference/rules/files/common/core/materials/","text":"materials path : /materials directory : True If file/directory not found : code: MISSING_MATERIALS_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'materials' in the base directory","title":"Materials"},{"location":"schema_reference/rules/files/common/core/materials/#materials","text":"path : /materials directory : True If file/directory not found : code: MISSING_MATERIALS_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'materials' in the base directory","title":"materials"},{"location":"schema_reference/rules/files/common/core/results/","text":"results path : /results directory : True If file/directory not found : code: MISSING_RESULTS_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'results' in the base directory","title":"Results"},{"location":"schema_reference/rules/files/common/core/results/#results","text":"path : /results directory : True If file/directory not found : code: MISSING_RESULTS_DIRECTORY level: ignore reason: It is recommended to include subdirectory named 'results' in the base directory","title":"results"},{"location":"schema_reference/rules/files/metadata/DirectoryMetadata/","text":"DirectoryMetadata stem : file_metadata extensions : ['.json'] baseDir : data arbitraryNesting : True If file/directory not found : code: MISSING_DIRECTORY_METADATA level: warning reason: It is optional to include a json metadata file within a data subdirectory that applies to all files within the current directory and its subdirectories","title":"DirectoryMetadata"},{"location":"schema_reference/rules/files/metadata/DirectoryMetadata/#directorymetadata","text":"stem : file_metadata extensions : ['.json'] baseDir : data arbitraryNesting : True If file/directory not found : code: MISSING_DIRECTORY_METADATA level: warning reason: It is optional to include a json metadata file within a data subdirectory that applies to all files within the current directory and its subdirectories","title":"DirectoryMetadata"},{"location":"schema_reference/rules/files/metadata/SidecarMetadata/","text":"SidecarMetadata baseDir : data arbitraryNesting : True suffix : data extensions : ['.json'] If file/directory not found : code: MISSING_SIDECAR_METADATA level: warning reason: It is optional to include a json metadata file within a data subdirectory that applies to a specific csv datafile within the current directory","title":"SidecarMetadata"},{"location":"schema_reference/rules/files/metadata/SidecarMetadata/#sidecarmetadata","text":"baseDir : data arbitraryNesting : True suffix : data extensions : ['.json'] If file/directory not found : code: MISSING_SIDECAR_METADATA level: warning reason: It is optional to include a json metadata file within a data subdirectory that applies to a specific csv datafile within the current directory","title":"SidecarMetadata"},{"location":"schema_reference/rules/files/tabular_data/data/Datafile/","text":"Datafile suffix : data extensions : ['.csv'] baseDir : data arbitraryNesting : True columnsMatchMetadata : True usesKeywords : True nonCanonicalKeywordsAllowed : True fileRegex : ([a-z]+-[a-zA-Z0-9]+)(_[a-z]+-[a-zA-Z0-9]+)*_data.csv If file/directory not found : code: MISSING_DATAFILE level: error reason: It is required to include at least one valid csv datafile under the data subdirectory","title":"Datafile"},{"location":"schema_reference/rules/files/tabular_data/data/Datafile/#datafile","text":"suffix : data extensions : ['.csv'] baseDir : data arbitraryNesting : True columnsMatchMetadata : True usesKeywords : True nonCanonicalKeywordsAllowed : True fileRegex : ([a-z]+-[a-zA-Z0-9]+)(_[a-z]+-[a-zA-Z0-9]+)*_data.csv If file/directory not found : code: MISSING_DATAFILE level: error reason: It is required to include at least one valid csv datafile under the data subdirectory","title":"Datafile"}]}